swagger: '2.0'
info:
  version: '0.2'
  title: Jamf Pro Customer API
  description: Jamf Pro Customer API
  termsOfService: TOS
  contact:
    name: Developer Relations
    url: 'http://www.jamf.com'
    email: developer.relations@jamf.com
  license:
    name: Jamf Pro Customer API License
    url: 'http://www.jamf.com'
host: example.com
basePath: /JSSResource
schemes:
  - http
consumes:
  - application/xml
produces:
  - application/xml
paths:
  "/accounts":
    get:
      summary: Finds all accounts
      operationId: findAccounts
      parameters: []
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/accounts'
  "/accounts/groupid/{id}":
    get:
      summary: Finds groups by ID
      operationId: findGroupsById
      parameters:
      - description: ID value to filter by
        in: path
        name: id
        required: true
        type: integer
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/group'
    put:
      summary: Updates an existing group by ID
      operationId: updateGroupById
      parameters:
      - description: ID value to filter by
        in: path
        name: id
        required: true
        type: integer
      responses:
        '201':
          description: Created
    post:
      summary: Creates a new group by ID
      operationId: createGroupById
      parameters:
      - description: ID value to filter by
        in: path
        name: id
        required: true
        type: integer
      - description: Group name
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/group'
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes a group by ID
      operationId: deleteGroupById
      parameters:
      - description: ID value to filter by
        in: path
        name: id
        required: true
        type: integer
      responses:
        '200':
          description: OK
  "/accounts/groupname/{name}":
    get:
      summary: Finds groups by name
      operationId: findGroupsByName
      parameters:
      - description: Name to filter by
        in: path
        name: name
        required: true
        type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/group'
    put:
      summary: Updates an existing group by name
      operationId: updateGroupByName
      parameters:
      - description: Name value to filter by
        in: path
        name: name
        required: true
        type: integer
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes a group by name
      operationId: deleteGroupByName
      parameters:
      - description: Name value to filter by
        in: path
        name: name
        required: true
        type: integer
      responses:
        '200':
          description: OK
  "/accounts/userid/{id}":
    get:
      summary: Finds accounts by ID
      operationId: findAccountsById
      parameters:
      - description: ID value to filter by
        in: path
        name: id
        required: true
        type: integer
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/account'
    put:
      summary: Updates an existing account by ID
      operationId: updateAccountById
      parameters:
      - description: ID value to filter by
        in: path
        name: id
        required: true
        type: integer
      responses:
        '201':
          description: Created
    post:
      summary: Creates a new account by ID
      operationId: createAccountById
      parameters:
      - description: ID value to filter by
        in: path
        name: id
        required: true
        type: integer
      - description: Account name
        in: body
        name: body
        required: true
        schema:
         "$ref": "#/definitions/account"
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes an account by ID
      operationId: deleteAccountById
      parameters:
      - description: ID value to filter by
        in: path
        name: id
        required: true
        type: integer
      responses:
        '200':
          description: OK
  "/accounts/username/{name}":
    get:
      summary: Finds accounts by name
      operationId: findAccountsByName
      parameters:
      - description: Name to filter by
        in: path
        name: name
        required: true
        type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/account'
    put:
      summary: Updates an existing account by name
      operationId: updateAccountByName
      parameters:
      - description: Name value to filter by
        in: path
        name: name
        required: true
        type: string
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes an account by name
      operationId: deleteAccountByName
      parameters:
      - description: Name value to filter by
        in: path
        name: name
        required: true
        type: string
      responses:
        '200':
          description: OK
  "/activationcode":
    get:
      summary: Finds the JSS activation code
      operationId: findactivationcode
      parameters: []
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/activation_code'
    put:
      summary: Updates the JSS activation code
      operationId: updateActivationCode
      parameters: []
      responses:
        '201':
          description: Created
  "/advancedcomputersearches":
    get:
      summary: Finds all advanced computer searches
      operationId: findAdvancedComputerSearches
      parameters: []
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/advanced_computer_searches'
  '/advancedcomputersearches/id/{id}':
    get:
      summary: Finds computer searches by ID
      operationId: findAdvancedComputerSearchesById
      parameters:
        - description: ID value to filter by
          in: path
          name: id
          required: true
          type: integer
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/advanced_computer_search'
    put:
      summary: Updates an existing advanced computer search by ID
      operationId: updateAdvancedComputerSearchById
      parameters:
        - description: ID value to filter by
          in: path
          name: id
          required: true
          type: integer
      responses:
        '201':
          description: Created
    post:
      summary: Creates a new advanced computer search
      operationId: createAdvancedComputerSearchgById
      parameters:
      - description: ID to filter by
        in: path
        name: id
        required: true
        type: integer
      - description: Name of object
        in: body
        name: body
        required: true
        schema:
         "$ref": "#/definitions/advanced_computer_search"
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes a computer search by ID
      operationId: deleteAdvancedComputerSearchById
      parameters:
        - description: ID value to filter by
          in: path
          name: id
          required: true
          type: integer
      responses:
        '200':
          description: OK
  '/advancedcomputersearches/name/{name}':
    get:
      summary: Finds advanced computer searches by name
      operationId: findAdvancedComputerSearchesByName
      parameters:
        - description: Name to filter by
          in: path
          name: name
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/advanced_computer_search'
    put:
      summary: Updates an existing advanced computer search by name
      operationId: updateAdvancedComputerSearchByName
      parameters:
        - description: Name to filter by
          in: path
          name: name
          required: true
          type: string
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes a computer search by Name
      operationId: deleteAdvancedComputerSearchByName
      parameters:
        - description: Name to filter by
          in: path
          name: name
          required: true
          type: string
      responses:
        '200':
          description: OK
  "/advancedmobiledevicesearches":
    get:
      summary: Finds all advanced mobile device searches
      operationId: findAdvancedMobileDeviceSearches
      parameters: []
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/advanced_mobile_device_searches'
  "/advancedmobiledevicesearches/id/{id}":
    get:
      summary: Finds mobile device searches by ID
      operationId: findAdvancedMobileDeviceSearchesById
      parameters:
      - description: ID value to filter by
        in: path
        name: id
        required: true
        type: integer
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/advanced_mobile_device_search'
    put:
      summary: Updates an existing advanced mobile device search by ID
      operationId: updateAdvancedMobileDeviceSearchById
      parameters:
      - description: ID value to filter by
        in: path
        name: id
        required: true
        type: integer
      responses:
        '201':
          description: Created
    post:
      summary: Creates a new advanced mobile device search
      operationId: createAdvancedMobileDeviceSearchById
      parameters:
      - description: ID value to filter by
        in: path
        name: id
        required: true
        type: integer
      - description: Name of advanced mobile device search
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/advanced_mobile_device_search'
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes a mobile device search by ID
      operationId: deleteAdvancedMobileDeviceSearchById
      parameters:
        - description: ID value to filter by
          in: path
          name: id
          required: true
          type: integer
      responses:
        '200':
          description: OK
  "/advancedmobiledevicesearches/name/{name}":
    get:
      summary: Finds advanced mobile device searches by name
      operationId: findMobileDeviceSearchesByName
      parameters:
      - description: Name to filter by
        in: path
        name: name
        required: true
        type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/advanced_mobile_device_search'
    put:
      summary: Updates an existing advanced mobile device search by name
      operationId: updateAdvancedMobileDeviceSearchByName
      parameters:
      - description: Nameto filter by
        in: path
        name: name
        required: true
        type: string
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes a mobile device search by name
      operationId: deleteAdvancedMobileDeviceSearchByName
      parameters:
        - description: Name to filter by
          in: path
          name: name
          required: true
          type: string
      responses:
        '200':
          description: OK
  "/advancedusersearches":
    get:
      summary: Finds all advanced user searches
      operationId: findAdvancedUserSearches
      parameters: []
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/advanced_user_searches'
  "/advancedusersearches/id/{id}":
    get:
      summary: Finds user searches by ID
      operationId: findAdvancedUserSearchesById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/advanced_user_search'
    put:
      summary: Updates an existing advanced user search by ID
      operationId: updateAdvancedUserSearchById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '200':
          description: OK
    post:
      summary: Creates a new advanced user search by ID
      operationId: createAdvancedUserSearchgById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      - description: Name of advanced user search
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/advanced_user_search'
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes a user search by ID
      operationId: deleteAdvancedUserSearchById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '200':
          description: OK
  "/advancedusersearches/name/{name}":
    get:
      summary: Finds user searches by name
      operationId: findUserSearchesByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/advanced_user_search'
    put:
      summary: Updates an existing advanced user search by name
      operationId: updateAdvancedUserSearchByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name to filter by
      responses:
        '200':
          description: OK
    delete:
      summary: Deletes a user search by Name
      operationId: deleteAdvancedUserSearchByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name to filter by
      responses:
        '200':
          description: OK
  "/allowedfileextensions":
    get:
      summary: Finds the allowed file extensions
      operationId: findAllowedFileExtension
      parameters: []
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/allowed_file_extensions'
  "/allowedfileextensions/id/{id}":
    get:
      summary: Finds an allowed file extension value by ID
      operationId: findAllowedFileExtensionById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: Database ID of the extension
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/allowed_file_extension'
    post:
      summary: Creates a new allowed file extension value by ID
      operationId: createAllowedFileExtensionById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: Database ID of the extension
      - description: Name of advanced user search
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/allowed_file_extension'
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes an allowed file extension value by ID
      operationId: deleteAllowedFileExtensionById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: Database ID of the extension
      responses:
        '200':
          description: OK
  "/allowedfileextensions/extension/{extension}":
    get:
      summary: Finds an allowed file extension value by name
      operationId: findAllowedFileExtensionByName
      parameters:
      - name: extension
        in: path
        required: true
        type: string
        description: String value of extension
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/allowed_file_extension'
  "/buildings":
    get:
      summary: Finds all buildings
      operationId: findBuildings
      parameters: []
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/buildings'
  "/buildings/id/{id}":
    get:
      summary: Finds buildings by ID
      operationId: findBuildingsById
      parameters:
      - description: ID value to filter by
        in: path
        name: id
        required: true
        type: integer
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/building'
    put:
      summary: Updates an existing building by ID
      operationId: updateBuildingById
      parameters:
      - description: ID value to filter by
        in: path
        name: id
        required: true
        type: integer
      responses:
        '201':
          description: Created
    post:
      summary: Creates a new building
      operationId: createBuildingById
      parameters:
      - description: ID value to filter by
        in: path
        name: id
        required: true
        type: integer
      - description: Name of building
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/building'
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes a building by ID
      operationId: deleteBuildingById
      parameters:
      - description: ID value to filter by
        in: path
        name: id
        required: true
        type: integer
      responses:
        '200':
          description: OK
  "/buildings/name/{name}":
    get:
      summary: Finds buildings by name
      operationId: findBuildingsByName
      parameters:
      - description: Name to filter by
        in: path
        name: name
        required: true
        type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/building'
    put:
      summary: Updates an existing building by name
      operationId: updateBuildingByName
      parameters:
      - description: Name to filter by
        in: path
        name: name
        required: true
        type: string
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes a building by name
      operationId: deleteBuildingByName
      parameters:
      - description: Name to filter by
        in: path
        name: name
        required: true
        type: string
      responses:
        '200':
          description: OK
  "/byoprofiles":
    get:
      summary: Finds all personal device profiles
      operationId: findBYOProfiles
      parameters: []
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/byoprofiles'
  "/byoprofiles/id/{id}":
    get:
      summary: Finds personal device profile by ID
      operationId: findBYOProfilesById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/byoprofile'
    put:
      summary: Updates a personal device profile by ID
      operationId: updateBYOProfilesById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '201':
          description: Created
    post:
      summary: Creates a personal device profile by ID
      operationId: createBYOProfilesById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/byoprofile'
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes a personal device profile by ID
      operationId: deleteBYOProfilesById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '200':
          description: OK
  "/byoprofiles/name/{name}":
    get:
      summary: Finds a personal device profile by name
      operationId: findBYOProfilesByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/byoprofile'
    put:
      summary: Updates a personal device profile by name
      operationId: updateBYOProfilesByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name value to filter by
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes a personal device profile by name
      operationId: deleteBYOProfilesByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name value to filter by
      responses:
        '200':
          description: OK
  "/categories":
    get:
      summary: Finds all categories
      operationId: findCategories
      parameters: []
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/categories'
  "/categories/id/{id}":
    get:
      summary: Finds categories by ID
      operationId: findCategoriesById
      parameters:
      - description: ID value to filter by
        in: path
        name: id
        required: true
        type: integer
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/category'
    put:
      summary: Updates an existing category by ID
      operationId: updateCategoryById
      parameters:
      - description: ID value to filter by
        in: path
        name: id
        required: true
        type: integer
      responses:
        '200':
          description: OK
    post:
      summary: Creates a new category by ID
      operationId: createCategoryById
      parameters:
      - description: ID value to filter by
        in: path
        name: id
        required: true
        type: integer
      - description: Name of category
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/category'
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes a category by ID
      operationId: deleteCategoryById
      parameters:
      - description: ID value to filter by
        in: path
        name: id
        required: true
        type: integer
      responses:
        '200':
          description: OK
  "/categories/name/{name}":
    get:
      summary: Finds categories by name
      operationId: findCategoriesByName
      parameters:
      - description: Name to filter by
        in: path
        name: name
        required: true
        type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/category'
    put:
      summary: Updates an existing category by name
      operationId: updateCategoryByName
      parameters:
      - description: Name to filter by
        in: path
        name: name
        required: true
        type: string
      responses:
        '200':
          description: OK
    delete:
      summary: Deletes a category by name
      operationId: deleteCategoryByName
      parameters:
      - description: Name to filter by
        in: path
        name: name
        required: true
        type: integer
      responses:
        '200':
          description: OK
  "/classes":
    get:
      summary: Finds all classes
      operationId: findClasses
      parameters: []
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/classes'
  "/classes/id/{id}":
    get:
      summary: Finds classes by ID
      operationId: findClassesById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/class'
    put:
      summary: Updates an existing class by ID
      description: The mobile device list is not used by this operation, the mobile device group is used instead.
      operationId: updateClassById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        200:
          description: OK
    post:
      summary: Creates a new class by ID
      description: The mobile device list is not used by this operation, the mobile device group is used instead.
      operationId: createClassById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      - name: body
        in: body
        required: true
        description: Class name
        schema:
          $ref: '#/definitions/category'
      responses:
        201:
          description: Created
    delete:
      summary: Deletes a class by ID
      operationId: deleteClassById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        200:
          description: OK
  "/classes/name/{name}":
    get:
      summary: Finds classes by name
      operationId: findClassesByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name to filter by
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/class'
    put:
      summary: Updates an existing class by name
      description: The mobile device list is not used by this operation, the mobile device group is used instead.
      operationId: updateClassByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name value to filter by
      responses:
        200:
          description: OK
    delete:
      summary: Deletes a class by name
      operationId: deleteClassByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name value to filter by
      responses:
        200:
          description: OK
  "/commandflush":
    delete:
      summary: Flushes commands based on information specified in an XML file
      operationId: commandFlush
      parameters:
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/commandflush'
      responses:
        200:
          description: OK
  "/commandflush/{idtype}/id/{id}/status/{status}":
    delete:
      summary: Flushes commands for devices
      operationId: createCommandFlushWithIdAndStatus
      parameters:
      - name: idtype
        in: path
        required: true
        type: string
        description: Type of device to be flushed
        enum:
          - computers
          - computergroups
          - mobiledevices
          - mobiledevicegroups
      - name: id
        in: path
        required: true
        type: integer
        description: ID of device to be flushed
      - name: status
        in: path
        required: true
        type: string
        description: Command status to be flushed
      responses:
        200:
          description: OK
  "/computerapplications/application/{application}":
    get:
      summary: Finds computer applications by name
      operationId: findComputerApplicationsByName
      parameters:
      - name: application
        in: path
        required: true
        type: string
        description: Application name to filter by
      responses:
        200:
          description: OK
  "/computerapplications/application/{application}/inventory/{inventory}":
    get:
      summary: Finds computer applications by name with additional display fields
      description: Valid values for inventory are comma separated Display Fields for computers. Display Fields with spaces must be percent encoded (e.g. /computerapplications/application/Safari.app/inventory/Operating%20System,Last%20Check-in)
      operationId: findComputerApplicationsByNameInventory
      parameters:
      - name: application
        in: path
        required: true
        type: string
        description: Application name to filter by
      - name: inventory
        in: path
        required: true
        type: string
        description: Inventory options
      responses:
        200:
          description: OK
  "/computerapplications/application/{application}/version/{version}":
    get:
      summary: Finds computer applications by name and version
      operationId: findComputerApplicationByNameAndVersion
      parameters:
      - name: application
        in: path
        required: true
        type: string
        description: Application name to filter by
      - name: version
        in: path
        required: true
        type: string
        description: Version to filter by
      responses:
        200:
          description: OK
  "/computerapplications/application/{application}/version/{version}/inventory/{inventory}":
    get:
      summary: Finds computer applications by name and version
      description: Generates additional inventory data for the devices matching the search criteria
      operationId: findComputerApplicationsByNameAndVersionAndInventory
      parameters:
      - name: application
        in: path
        required: true
        type: string
        description: Application name to filter by
      - name: version
        in: path
        required: true
        type: string
        description: Version to filter by
      - name: inventory
        in: path
        required: true
        type: string
        description: Inventory options
      responses:
        200:
          description: OK
  "/computerapplicationusage/id/{id}/{start_date}_{end_date}":
    get:
      summary: Finds computer application usage by computer ID
      operationId: findComputerApplicationUsageById
      parameters:
      - name: id
        in: path
        required: true
        type: string
        description: ID value to filter by
      - name: start_date
        in: path
        required: true
        type: string
        format: date
        description: Start date (e.g. yyyy-mm-dd)
      - name: end_date
        in: path
        required: true
        type: string
        format: date
        description: End date (e.g. yyyy-mm-dd)
      responses:
        200:
          description: OK
  "/computerapplicationusage/name/{name}/{start_date}_{end_date}":
    get:
      summary: Finds computer application usage by computer name
      operationId: findComputerApplicationUsageByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name to filter by
      - name: start_date
        in: path
        required: true
        type: string
        description: Start date (e.g. yyyy-mm-dd)
      - name: end_date
        in: path
        required: true
        type: string
        description: End date (e.g. yyyy-mm-dd)
      responses:
        200:
          description: OK
  "/computerapplicationusage/udid/{udid}/{start_date}_{end_date}":
    get:
      summary: Finds computer application usage by computer UDID
      operationId: findComputerApplicationUsageByUDID
      parameters:
      - name: udid
        in: path
        required: true
        type: string
        description: UDID to filter by
      - name: start_date
        in: path
        required: true
        type: string
        description: Start date (e.g. yyyy-mm-dd)
      - name: end_date
        in: path
        required: true
        type: string
        description: End date (e.g. yyyy-mm-dd)
      responses:
        200:
          description: OK
  "/computerapplicationusage/serialnumber/{serialnumber}/{start_date}_{end_date}":
    get:
      summary: Finds computer application usage by computer serial number
      operationId: findComputerApplicationUsageBySerial
      parameters:
      - name: serialnumber
        in: path
        required: true
        type: string
        description: Serial number to filter by
      - name: start_date
        in: path
        required: true
        type: string
        description: Start date (e.g. yyyy-mm-dd)
      - name: end_date
        in: path
        required: true
        type: string
        description: End date (e.g. yyyy-mm-dd)
      responses:
        200:
          description: OK
  "/computerapplicationusage/macaddress/{macaddress}/{start_date}_{end_date}":
    get:
      summary: Finds computer application usage by computer MAC address
      operationId: findComputerApplicationUsageByMacAddress
      parameters:
      - name: macaddress
        in: path
        required: true
        type: string
        description: MAC address to filter by
      - name: start_date
        in: path
        required: true
        type: string
        description: Start date (e.g. yyyy-mm-dd)
      - name: end_date
        in: path
        required: true
        type: string
        description: End date (e.g. yyyy-mm-dd)
      responses:
        200:
          description: OK
  "/computercheckin":
    get:
      summary: Finds the JSS computer checkin information
      operationId: findComputerCheckin
      parameters: []
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/computer_check_in'
    put:
      summary: Updates the JSS computer checkin information
      operationId: updateComputerCheckin
      parameters: []
      responses:
        '201':
          description: Created
  "/computercommands":
    get:
      summary: Finds all computer commands
      operationId: findComputerCommands
      parameters: []
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/computer_commands'
  "/computercommands/command/{command}":
    post:
      summary: Creates a new computer command using command name
      operationId: createComputerCommandByCommand
      parameters:
      - description: ''
        in: path
        name: command
        required: true
        type: string
      - description: Command name
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/computer_command'
      responses:
        '201':
          description: Created
  "/computercommands/id/{id}":
    get:
      summary: Finds a computer command by ID
      operationId: findComputerCommandsById
      parameters:
      - description: ID value to filter by
        in: path
        name: id
        required: true
        type: integer
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/computer_command'
  "/computercommands/name/{name}":
    get:
      summary: Finds all computer commands by name
      operationId: findComputerCommandsByName
      parameters:
      - description: Name to filter by
        in: path
        name: name
        required: true
        type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/computer_command'
  "/computercommands/uuid/{uuid}":
    get:
      summary: Finds a computer command by UUID
      operationId: findComputerCommandsByUuid
      parameters:
      - description: ''
        in: path
        name: uuid
        required: true
        type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/computer_command'
  "/computerconfigurations":
    get:
      summary: Finds all computer configurations
      operationId: findComputerConfigurations
      parameters: []
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/computer_configurations'
  "/computerconfigurations/id/{id}":
    get:
      summary: Finds computer configurations by ID
      operationId: findComputerConfigurationsById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/computer_configuration'
    put:
      summary: Updates an existing computer configuration by ID
      operationId: updateComputerConfigurationById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '201':
          description: Created
    post:
      summary: Creates a new computer configuration by ID
      operationId: createComputerConfigurationById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      - name: body
        in: body
        required: true
        description: Name of the configuration
        schema:
          $ref: '#/definitions/computer_configuration'
      responses:
        '200':
          description: Created
    delete:
      summary: Deletes a computer configuration by ID
      operationId: deleteComputerConfigurationById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '200':
          description: OK
  "/computerconfigurations/name/{name}":
    get:
      summary: Finds computer configurations by name
      operationId: findComputerConfigurationsByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/computer_configuration'
    put:
      summary: Updates an existing computer configuration by name
      operationId: updateComputerConfigurationByName
      parameters:
      - name: name
        in: path
        required: true
        type: integer
        description: Name value to filter by
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes a computer configuration by name
      operationId: deleteComputerConfigurationByName
      parameters:
      - name: name
        in: path
        required: true
        type: integer
        description: Name value to filter by
      responses:
        '200':
          description: OK
  "/computerextensionattributes":
    get:
      description: Finds all computer extension attributes
      operationId: findComputerextensionattributes
      parameters: []
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/computer_extension_attributes'
  "/computerextensionattributes/id/{id}":
    get:
      summary: Finds computer extension attributes by ID
      operationId: findComputerextensionattributesById
      parameters:
      - description: ID value to filter by
        in: path
        name: id
        required: true
        type: integer
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/computer_extension_attribute'
    put:
      summary: Updates an existing computer extension attribute by ID
      operationId: updateComputerextensionattributeById
      parameters:
      - description: ID value to filter by
        in: path
        name: id
        required: true
        type: integer
      responses:
        '201':
          description: Created
    post:
      summary: Creates a new computer extension attribute by ID
      operationId: createComputerextensionattributeById
      parameters:
      - description: ID value to filter by
        in: path
        name: id
        required: true
        type: integer
      - description: Extension attribute name
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/computer_extension_attribute'
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes a computer extension attribute by ID
      operationId: deleteComputerextensionattributeById
      parameters:
      - description: ID value to filter by
        in: path
        name: id
        required: true
        type: integer
      responses:
        '200':
          description: OK
  "/computerextensionattributes/name/{name}":
    get:
      summary: Finds computer extension attributes by name
      operationId: findComputerextensionattributesByName
      parameters:
      - description: Name to filter by
        in: path
        name: name
        required: true
        type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/computer_extension_attribute'
    put:
      summary: Updates an existing computer extension attribute by name
      operationId: updateComputerextensionattributeByName
      parameters:
      - description: Name value to filter by
        in: path
        name: name
        required: true
        type: string
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes a computer extension attribute by name
      operationId: deleteComputerextensionattributeByName
      parameters:
      - description: Name value to filter by
        in: path
        name: name
        required: true
        type: string
      responses:
        '200':
          description: OK
  "/computergroups":
    get:
      summary: Finds all computer groups
      operationId: findComputerGroups
      parameters: []
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/computer_groups'
  "/computergroups/id/{id}":
    get:
      summary: Finds computer groups by ID
      operationId: findComputerGroupsById
      parameters:
      - description: ID value to filter by
        in: path
        name: id
        required: true
        type: integer
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/computer_groups'
    put:
      summary: Updates an existing computer group by ID
      operationId: updateComputerGroupById
      parameters:
      - description: ID value to filter by
        in: path
        name: id
        required: true
        type: integer
      responses:
        '201':
          description: Created
    post:
      summary: Creates a new computer group by ID
      operationId: createComputerGroupById
      parameters:
      - description: ID value to filter by
        in: path
        name: id
        required: true
        type: integer
      - description: Name of the group
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/computer_group'
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes a computer group by ID
      operationId: deleteComputerGroupById
      parameters:
      - description: ID value to filter by
        in: path
        name: id
        type: integer
        required: true
      responses:
        '200':
          description: OK
  "/computergroups/name/{name}":
    get:
      summary: Finds computer groups by name
      operationId: findComputerGroupsByName
      parameters:
      - description: Name to filter by
        in: path
        name: name
        required: true
        type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/computer_groups'
    put:
      summary: Updates an existing computer group by name
      operationId: updateComputerGroupByName
      parameters:
      - description: Name value to filter by
        in: path
        name: name
        required: true
        type: string
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes a computer group by name
      operationId: deleteComputerGroupByName
      parameters:
      - description: Name value to filter by
        in: path
        name: name
        type: string
        required: true
      responses:
        '200':
          description: OK
  "/computerhardwaresoftwarereports/id/{id}/{start_date}_{end_date}":
    get:
      summary: Finds hardware/software reports by computer ID
      operationId: findComputerHardwareSoftwareReportsById
      parameters:
      - name: id
        in: path
        required: true
        type: string
        description: ID value to filter by
      - name: start_date
        in: path
        required: true
        type: string
        format: date
        description: Start date (e.g. yyyy-mm-dd)
      - name: end_date
        in: path
        required: true
        type: string
        format: date
        description: End date (e.g. yyyy-mm-dd)
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/computer_hardware_software_reports'
  "/computerhardwaresoftwarereports/name/{name}/{start_date}_{end_date}":
    get:
      summary: Finds hardware/software reports by computer name
      operationId: findComputerHardwareSoftwareReportsByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name to filter by
      - name: start_date
        in: path
        required: true
        type: string
        format: date
        description: Start date (e.g. yyyy-mm-dd)
      - name: end_date
        in: path
        required: true
        type: string
        format: date
        description: End date (e.g. yyyy-mm-dd)
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/computer_hardware_software_reports'
  "/computerhardwaresoftwarereports/udid/{udid}/{start_date}_{end_date}":
    get:
      summary: Finds hardware/software reports by computer UDID
      operationId: findComputerHardwareSoftwareReportsByUDID
      parameters:
      - name: udid
        in: path
        required: true
        type: string
        description: UDID to filter by
      - name: start_date
        in: path
        required: true
        type: string
        format: date
        description: Start date (e.g. yyyy-mm-dd)
      - name: end_date
        in: path
        required: true
        type: string
        format: date
        description: End date (e.g. yyyy-mm-dd)
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/computer_hardware_software_reports'
  "/computerhardwaresoftwarereports/serialnumber/{serialnumber}/{start_date}_{end_date}":
    get:
      summary: Finds hardware/software reports by computer serial number
      operationId: findComputerHardwareSoftwareReportsBySerial
      parameters:
      - name: serialnumber
        in: path
        required: true
        type: string
        description: Serial number to filter by
      - name: start_date
        in: path
        required: true
        type: string
        format: date
        description: Start date (e.g. yyyy-mm-dd)
      - name: end_date
        in: path
        required: true
        type: string
        format: date
        description: End date (e.g. yyyy-mm-dd)
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/computer_hardware_software_reports'
  "/computerhardwaresoftwarereports/macaddress/{macaddress}/{start_date}_{end_date}":
    get:
      summary: Finds hardware/software reports by computer MAC address
      operationId: findComputerHardwareSoftwareReportsByMacAddress
      parameters:
      - name: macaddress
        in: path
        required: true
        type: string
        description: MAC address to filter by
      - name: start_date
        in: path
        required: true
        type: string
        format: date
        description: Start date (e.g. yyyy-mm-dd)
      - name: end_date
        in: path
        required: true
        type: string
        format: date
        description: End date (e.g. yyyy-mm-dd)
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/computer_hardware_software_reports'
  "/computerhardwaresoftwarereports/id/{id}/{start_date}_{end_date}/subset/{subset}":
    get:
      summary: Display subsets of information for computer hardware/software history
      operationId: findComputerHardwareSoftwareReportsByIdSubset
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: Computer ID to filter by
      - name: start_date
        in: path
        required: true
        type: string
        format: date
        description: Start date (e.g. yyyy-mm-dd)
      - name: end_date
        in: path
        required: true
        type: string
        format: date
        description: End date (e.g. yyyy-mm-dd)
      - name: subset
        in: path
        required: true
        type: string
        description: Subset to filter by
        enum: [Software, Hardwre, Fonts, Plugins]
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/computer_hardware_software_reports'
  "/computerhistory/id/{id}":
    get:
      summary: Finds computer history by ID
      operationId: findComputerHistoryById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: Computer ID value to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/computer_history'
  "/computerhistory/name/{name}":
    get:
      summary: Finds computer history by name
      operationId: findComputerHistoryByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Computer Name to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/computer_history'
  "/computerhistory/udid/{udid}":
    get:
      summary: Finds computer history by UDID
      operationId: findComputerHistoryByUDID
      parameters:
      - name: udid
        in: path
        required: true
        type: string
        description: Computer UDID to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/computer_history'
  "/computerhistory/serialnumber/{serialnumber}":
    get:
      summary: Finds computer history by serial number
      operationId: findComputerHistoryBySerialNumber
      parameters:
      - name: serialnumber
        in: path
        required: true
        type: string
        description: Computer Serial Number to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/computer_history'
  "/computerhistory/macaddress/{macaddress}":
    get:
      summary: Finds computer history by MAC address
      operationId: findComputerHistoryByMacAddress
      parameters:
      - name: macaddress
        in: path
        required: true
        type: string
        description: Computer Mac Address to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/computer_history'
  "/computerhistory/id/{id}/subset/{subset}":
    get:
      summary: Display subsets of information for a computer history
      operationId: findComputerHistoryByIdSubset
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: Computer ID to filter by
      - name: subset
        in: path
        required: true
        type: string
        description: Subset to filter by
        enum: [General, ComputerUsageLogs, Audits, PolicyLogs, CasperRemoteLogs, ScreenSharingLogs, CasperImagingLogs, Commands, UserLocation, MacAppStoreApplications]
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/computer_history'
  "/computerinventorycollection":
    get:
      summary: Finds the JSS computer inventory collection information
      operationId: findComputerInventoryCollection
      parameters: []
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/computer_inventory_collection'
    put:
      summary: Updates the JSS computer inventory collection information
      operationId: updateComputerInventoryCollection
      parameters: []
      responses:
        '201':
          description: Created
  "/computermanagement/id/{id}":
    get:
      summary: Finds computer management information by ID
      operationId: findComputerManagementById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: Computer ID value to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/computer_management'
  "/computermanagement/name/{name}":
    get:
      summary: Finds computer management information by name
      operationId: findComputerManagementByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Computer Name to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/computer_management'
  "/computermanagement/udid/{udid}":
    get:
      summary: Finds computer management information by UDID
      operationId: findComputerManagementByUDID
      parameters:
      - name: udid
        in: path
        required: true
        type: string
        description: Computer UDID to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/computer_management'
  "/computermanagement/serialnumber/{serialnumber}":
    get:
      summary: Finds computer management information by serial number
      operationId: findComputerManagementBySerialNumber
      parameters:
      - name: serialnumber
        in: path
        required: true
        type: string
        description: Computer Serial Number to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/computer_management'
  "/computermanagement/macaddress/{macaddress}":
    get:
      summary: Finds computer management information by MAC address
      operationId: findComputerManagementByMacAddress
      parameters:
      - name: macaddress
        in: path
        required: true
        type: string
        description: Computer Mac Address to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/computer_management'
  "/computermanagement/id/{id}/subset/{subset}":
    get:
      summary: Display subsets of management information for a computer
      operationId: findComputerManagementByIdSubset
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: Computer ID to filter by
      - name: subset
        in: path
        required: true
        type: string
        description: Subset to filter by
        enum: [General, Policies, Ebooks, MacAppStoreApps, OSXConfigurationProfiles, ManagedPreferenceProfiles, RestrictedSoftware, SmartGroups, StaticGroups, PatchReportingSoftwareTitles]
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/computer_management'
  "/computermanagement/id/{id}/username/{username}":
    get:
      summary: Display management information for a computer and username
      operationId: findComputerManagementByIdUsername
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: Computer ID to filter by
      - name: username
        in: path
        required: true
        type: string
        description: Username to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/computer_management'
  "/computermanagement/id/{id}/username/{username}/subset/{subset}":
    get:
      summary: Display subsets of management information for a computer and username
      operationId: findComputerManagementByIdUsernameSubset
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: Computer ID to filter by
      - name: username
        in: path
        required: true
        type: string
        description: Username to filter by
      - name: subset
        in: path
        required: true
        type: string
        description: Subset to filter by
        enum: [General, Policies, Ebooks, MacAppStoreApps, OSXConfigurationProfiles, ManagedPreferenceProfiles, RestrictedSoftware, SmartGroups, StaticGroups, PatchReportingSoftwareTitles]
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/computer_management'
  "/computermanagement/id/{id}/patchfilter/{filter}":
    get:
      summary: Display patch management information for a computer and filter
      operationId: findComputerManagementByIdPatchFilter
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: Computer ID to filter by
      - name: filter
        in: path
        required: true
        type: string
        description: filter to apply
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/computer_management'
  "/computers":
    get:
      summary: Finds all computers
      operationId: findComputers
      parameters: []
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/computers'
  "/computers/subset/basic":
    get:
      summary: Finds basic information for all computers
      operationId: findComputersBasic
      parameters: []
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/computers_basic'
  "/computers/match/{match}":
    get:
      summary: Searches for computers that match the provided parameter
      operationId: matchComputers
      parameters:
      - name: match
        in: path
        required: true
        type: string
        description: Name, mac address, etc. to filter by.  Match uses the same format
          as the general search in the JSS.  For instance, admin* can be used to match
          computer names that begin with admin
      responses:
        '200':
          description: OK
  "/computers/match/name/{matchname}":
    get:
      summary: Searches for computers that match the provided name parameter
      operationId: matchComputersNames
      parameters:
      - name: matchname
        in: path
        required: true
        type: string
        description: Name to filter by
      responses:
        '200':
          description: OK
  "/computers/id/{id}":
    get:
      summary: Finds computers by ID
      operationId: findComputersById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/computer'
    put:
      summary: Updates an existing computer by ID
      operationId: updateComputerById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '201':
          description: Created
    post:
      summary: Creates a computer
      operationId: createComputerById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes a computer by ID
      operationId: deleteComputerById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '200':
          description: OK
  "/computers/name/{name}":
    get:
      summary: Finds the first computer with the given name
      operationId: findComputersByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/computer'
    put:
      summary: Updates an existing computer by name
      operationId: updateComputerByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name value to filter by
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes a computer by name
      operationId: deleteComputerByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name value to filter by
      responses:
        '200':
          description: OK
  "/computers/udid/{udid}":
    get:
      summary: Finds computers by UDID
      operationId: findComputersByUDID
      parameters:
      - name: udid
        in: path
        required: true
        type: string
        description: UDID to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/computer'
    put:
      summary: Updates an existing computer by UDID
      operationId: updateComputerByUDID
      parameters:
      - name: udid
        in: path
        required: true
        type: string
        description: UDID value to filter by
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes a computer by UDID
      operationId: deleteComputerByUDID
      parameters:
      - name: udid
        in: path
        required: true
        type: string
        description: UDID value to filter by
      responses:
        '200':
          description: OK
  "/computers/serialnumber/{serialnumber}":
    get:
      summary: Finds computers by serial number
      operationId: findComputersBySerialNumber
      parameters:
      - name: serialnumber
        in: path
        required: true
        type: string
        description: Serial number to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/computer'
    put:
      summary: Updates an existing computer by serial number
      operationId: updateComputerBySerialNumber
      parameters:
      - name: serialnumber
        in: path
        required: true
        type: string
        description: Serial number value to filter by
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes a computer by serial number
      operationId: deleteComputerBySerialNumber
      parameters:
      - name: serialnumber
        in: path
        required: true
        type: string
        description: Serial number value to filter by
      responses:
        '200':
          description: OK
  "/computers/macaddress/{macaddress}":
    get:
      summary: Finds computers by MAC address
      operationId: findComputersByMacAddress
      parameters:
      - name: macaddress
        in: path
        required: true
        type: string
        description: Mac address to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/computer'
    put:
      summary: Updates an existing computer by MAC address
      operationId: updateComputerByMacAddress
      parameters:
      - name: macaddress
        in: path
        required: true
        type: string
        description: MAC address value to filter by
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes a computer by MAC address
      operationId: deleteComputerByMacAddress
      parameters:
      - name: macaddress
        in: path
        required: true
        type: string
        description: MAC address value to filter by
      responses:
        '200':
          description: OK
  "/computers/id/{id}/subset/{subset}":
    get:
      summary: Display subsets of information for a computer
      operationId: findComputersByIdSubset
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID to filter by
      - name: subset
        in: path
        required: true
        type: string
        description: Subset to filter by
        enum: [General, Location, Purchasing, Peripherals, Hardware, Certificates, Software, ExtensionAttributes, GroupsAccounts, iphones, ConfigurationProfiles]
      responses:
        '200':
          description: OK
  "/departments":
    get:
      summary: Finds all departments
      operationId: findDepartments
      parameters: []
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/departments'
  "/departments/id/{id}":
    get:
      summary: Finds departments by ID
      operationId: findDepartmentsById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/department'
    put:
      summary: Updates an existing department by ID
      operationId: updateDepartmentById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '201':
          description: Created
    post:
      summary: Creates a new department by ID
      operationId: createDepartmentById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      - name: body
        in: body
        required: true
        description: Department name
        schema:
          $ref: '#/definitions/department'
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes a department by ID
      operationId: deleteDepartmentById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '200':
          description: OK
  "/departments/name/{name}":
    get:
      summary: Finds departments by name
      operationId: findDepartmentsByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name to filter by
      responses:
        '200':
          description: OK
    put:
      summary: Updates an existing department by name
      operationId: updateDepartmentByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name value to filter by
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes a department by name
      operationId: deleteDepartmentByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name value to filter by
      responses:
        '200':
          description: OK
  "/directorybindings":
    get:
      summary: Finds all directory bindings
      operationId: findDirectoryBindings
      parameters: []
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/directory_bindings'
  "/directorybindings/id/{id}":
    get:
      summary: Finds directory bindings by ID
      operationId: findDirectoryBindingsById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/directory_binding'
    put:
      summary: Updates an existing directory binding by ID
      operationId: updateDirectoryBindingById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '201':
          description: Created
    post:
      summary: Creates a new directory binding by ID
      operationId: createDirectoryBindingById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/directory_binding'
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes a directory binding by ID
      operationId: deleteDirectoryBindingById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '200':
          description: OK
  "/directorybindings/name/{name}":
    get:
      summary: Finds directory bindings by name
      operationId: findDirectoryBindingsByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/directory_binding'
    put:
      summary: Updates an existing directory binding by name
      operationId: updateDirectoryBindingByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name value to filter by
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes a directory binding by name
      operationId: deleteDirectoryBindingByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name value to filter by
      responses:
        '200':
          description: OK
  "/diskencryptionconfigurations":
    get:
      summary: Finds all disk encryption configurations
      operationId: findDiskEncryptionConfigurations
      parameters: []
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/disk_encryption_configurations'
  "/diskencryptionconfigurations/id/{id}":
    get:
      summary: Finds disk encryption configurations by ID
      operationId: findDiskEncryptionConfigurationsById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/disk_encryption_configuration'
    put:
      summary: Updates an existing disk encryption configuration by ID
      operationId: updateDiskEncryptionConfigurationById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '201':
          description: Created
    post:
      summary: Creates a new disk encryption configuration by ID
      operationId: createDiskEncryptionConfigurationById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/disk_encryption_configuration'
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes a disk encryption configuration by ID
      operationId: deleteDiskEncryptionConfigurationById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '200':
          description: OK
  "/diskencryptionconfigurations/name/{name}":
    get:
      summary: Finds disk encryption configurations by name
      operationId: findDiskEncryptionConfigurationsByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/disk_encryption_configuration'
    put:
      summary: Updates an existing disk encryption configuration by name
      operationId: updateDiskEncryptionConfigurationByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name value to filter by
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes a disk encryption configuration by name
      operationId: deleteDiskEncryptionConfigurationByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name value to filter by
      responses:
        '200':
          description: OK
  "/distributionpoints":
    get:
      summary: Finds all distribution points
      operationId: findDistributionPoints
      parameters: []
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/distribution_points'
  "/distributionpoints/id/{id}":
    get:
      summary: Finds distribution points by ID
      operationId: findDistributionPointsById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/distribution_point'
    put:
      summary: Updates an existing distribution point by ID
      operationId: updateDistributionPointById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '201':
          description: Created
    post:
      summary: Creates a new distribution point by ID
      operationId: createDistributionPointById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      - name: body
        in: body
        required: true
        description: Distribution point name
        schema:
          $ref: '#/definitions/distribution_point'
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes a distribution point by ID
      operationId: deleteDistributionPointById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '200':
          description: OK
  "/distributionpoints/name/{name}":
    get:
      summary: Finds distribution points by name
      operationId: findDistributionPointsByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/distribution_point'
    put:
      summary: Updates an existing distribution point by name
      operationId: updateDistributionPointByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name value to filter by
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes a distribution point by name
      operationId: deleteDistributionPointByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name value to filter by
      responses:
        '200':
          description: OK
  "/dockitems":
    get:
      summary: Finds all dock items
      operationId: findDockItems
      parameters: []
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/dock_items'
  "/dockitems/id/{id}":
    get:
      summary: Finds dock items by ID
      operationId: findDockItemsById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/dock_item'
    put:
      summary: Updates an existing dock item by ID
      operationId: updateDockItemById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '201':
          description: Created
    post:
      summary: Creates a new dock item by ID
      operationId: createDockItemById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      - name: body
        in: body
        required: true
        description: Dock item name
        schema:
          $ref: '#/definitions/dock_item'
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes a dock item by ID
      operationId: deleteDockItemById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '200':
          description: OK
  "/dockitems/name/{name}":
    get:
      summary: Finds dock items by name
      operationId: findDockItemsByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/dock_item'
    put:
      summary: Updates an existing dock item by name
      operationId: updateDockItemByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name value to filter by
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes a dock item by name
      operationId: deleteDockItemByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name value to filter by
      responses:
        '200':
          description: OK
  "/ebooks":
    get:
      summary: Finds all ebooks
      operationId: findEBooks
      parameters: []
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ebooks'
  "/ebooks/id/{id}":
    get:
      summary: Finds ebooks by ID
      operationId: findEBooksById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ebook'
    put:
      summary: Updates an existing ebook by ID
      operationId: updateEBookById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '201':
          description: Created
    post:
      summary: Creates a new ebook by ID
      operationId: createEBookById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      - name: body
        in: body
        required: true
        description: Ebook name
        schema:
          $ref: '#/definitions/ebook'
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes an ebook by ID
      operationId: deleteEBookById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '200':
          description: OK
  "/ebooks/name/{name}":
    get:
      summary: Finds ebooks by name
      operationId: findEBooksByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ebook'
    put:
      summary: Updates an existing ebook by name
      operationId: updateEBookByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name value to filter by
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes an ebook by name
      operationId: deleteEBookByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name value to filter by
      responses:
        '200':
          description: OK
  "/ebooks/id/{id}/subset/{subset}":
    get:
      summary: Display subsets of information for an ebook
      operationId: findEbookssByIdSubset
      parameters:
      - name: id
        in: path
        required: true
        type: string
        description: ID to filter by
      - name: subset
        in: path
        required: true
        type: string
        description: Subset to filter by
        enum: [General, Scope, SelfService]
      responses:
        '200':
          description: OK
  "/fileuploads/{resource}/{idType}/{id}":
    post:
      summary: Creates file attachments in the JSS
      description: Here is a sample command curl -k -u user:password https://my.jss:8443/JSSResource/fileuploads/computers/id/2 -F name=@/Users/admin/Documents/Sample.doc -X POST
      operationId: uploadFiles
      parameters:
      - name: resource
        in: path
        required: true
        type: string
        description: Resource to attach the file to
        enum: [computers, mobiledevices, enrollmentprofiles, printers, peripherals, policies, ebooks, mobiledeviceapplicationsicon, mobiledeviceapplicationsipa, diskencryptionconfigurations]
      - name: idType
        in: path
        required: true
        type: string
        description: Name is supported for all but the peripherals resource
        enum: [id, name]
      - name: id
        in: path
        required: true
        type: string
        description: ''
      responses:
        '201':
          description: Created
  "/gsxconnection":
    get:
      summary: Finds the JSS GSX connection information
      operationId: findGSXConnection
      parameters: []
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/gsx_connection'
    put:
      summary: Updates the JSS GSX connection information
      operationId: updateGSXConnection
      parameters: []
      responses:
        '201':
          description: Created
  "/healthcarelistener":
    get:
      summary: Find all Healthcare Listeners
      operationId: findHealthcareListener
      parameters: []
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/healthcare_listeners'
  "/healthcarelistener/id/{id}":
    get:
      summary: Finds healthcare listener by ID
      operationId: findHealthcareListenersById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/healthcare_listener'
    put:
      summary: Updates an existing healthcare listener by ID
      operationId: updateHealthCareListenerById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '201':
          description: Created
  "/ibeacons":
    get:
      summary: Finds all iBeacon regions
      operationId: findIBeacons
      parameters: []
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ibeacons'
  "/ibeacons/id/{id}":
    get:
      summary: Finds iBeacon regions by ID
      operationId: findIBeaconsById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ibeacon'
    put:
      summary: Updates an existing iBeacon region by ID
      operationId: updateIBeaconById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '201':
          description: Created
    post:
      summary: Creates a new iBeacon region by ID
      operationId: createIBeaconById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      - name: body
        in: body
        required: true
        description: Name of the iBeacon
        schema:
          $ref: '#/definitions/ibeacon'
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes an iBeacon region by ID
      operationId: deleteIBeaconById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '200':
          description: OK
  "/ibeacons/name/{name}":
    get:
      summary: Finds iBeacon regions by name
      operationId: findIBeaconsByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ibeacon'
    put:
      summary: Updates an existing iBeacon region by name
      operationId: updateIBeaconByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name to filter by
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes an iBeacon region by name
      operationId: deleteIBeaconByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name to filter by
      responses:
        '200':
          description: OK
  "/infrastructuremanager":
    get:
      summary: Find all Infrastructure Managers
      operationId: findInfrastructureManager
      parameters: []
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/infrastructure_managers'
  "/infrastructuremanager/id/{id}":
    get:
      summary: Finds infrastructure manager by ID
      operationId: findInfrastructureManagerById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/infrastructure_manager'
    put:
      summary: Updates an existing infrastructure manager by ID
      operationId: updateInfrastructureManagerById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '201':
          description: Created
  "/ldapservers":
    get:
      summary: Finds all LDAP servers
      operationId: findLDAPServers
      parameters: []
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ldap_servers'
  "/ldapservers/id/{id}":
    get:
      summary: Finds LDAP servers by ID
      operationId: findLDAPServersById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ldap_server'
    put:
      summary: Updates an existing LDAP server by ID
      operationId: updateLDAPServerById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '201':
          description: Created
    post:
      summary: Creates a new LDAP server by ID
      operationId: createLDAPServerById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      - name: body
        in: body
        required: true
        description: LDAP server name
        schema:
          $ref: '#/definitions/ldap_server'
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes an LDAP server by ID
      operationId: deleteLDAPServerById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '200':
          description: OK
  "/ldapservers/name/{name}":
    get:
      summary: Finds LDAP servers by name
      operationId: findLDAPServersByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name to filter by
      responses:
        '200':
          description: OK
    put:
      summary: Updates an existing LDAP server by name
      operationId: updateLDAPServerByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name value to filter by
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes an LDAP server by name
      operationId: deleteLDAPServerByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name value to filter by
      responses:
        '200':
          description: OK
  "/ldapservers/id/{id}/user/{user}":
    get:
      summary: Display information for matching users for an LDAP server
      operationId: findLDAPServerUser
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: Server ID to filter by
      - name: user
        in: path
        required: true
        type: string
        description: User to filter by
      responses:
        '200':
          description: OK
  "/ldapservers/id/{id}/group/{group}":
    get:
      summary: Display information for matching groups for an LDAP server
      operationId: findLDAPServerGroup
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: Server ID to filter by
      - name: group
        in: path
        required: true
        type: string
        description: Group to filter by
      responses:
        '200':
          description: OK
  "/ldapservers/id/{id}/group/{group}/user/{user}":
    get:
      summary: Display information about user membership in a group for an LDAP server
      operationId: findLDAPServerGroupUser
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: Server ID to filter by
      - name: group
        in: path
        required: true
        type: string
        description: Group to filter by
      - name: user
        in: path
        required: true
        type: string
        description: User to filter by
      responses:
        '200':
          description: OK
  "/licensedsoftware":
    get:
      summary: Finds all licensed software
      operationId: findLicensedSoftware
      parameters: []
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/licensed_software_all'
  "/licensedsoftware/id/{id}":
    get:
      summary: Finds licensed software by ID
      operationId: findLicensedSoftwareById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/licensed_software'
    put:
      summary: Updates an existing computer command by ID
      operationId: updateLicensedSoftwareById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '201':
          description: Created
    post:
      summary: Creates a new computer command by ID
      operationId: createLicensedSoftwareById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      - name: body
        in: body
        required: true
        description: Licensed software name
        schema:
          $ref: '#/definitions/licensed_software'
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes a computer command by ID
      operationId: deleteLicensedSoftwareById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '200':
          description: OK
  "/licensedsoftware/name/{name}":
    get:
      summary: Finds licensed software by name
      operationId: findLicensedSoftwareByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/licensed_software'
    put:
      summary: Updates an existing computer command by name
      operationId: updateLicensedSoftwareByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name value to filter by
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes a computer command by name
      operationId: deleteLicensedSoftwareByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name value to filter by
      responses:
        '200':
          description: OK
  "/logflush":
    delete:
      summary: Flushes a log specified in an XML file
      operationId: logFlush
      parameters:
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/logflush'
      responses:
        '200':
          description: OK
  "/logflush/{log}/interval/{interval}":
    delete:
      summary: Flushes all logs for a given interval
      operationId: createLogFlushForInterval
      parameters:
      - name: interval
        in: path
        required: true
        type: string
        description: Supported values are a combination of [Zero, One, Two, Three, Six] and [Days, Weeks, Months, Years]
      - name: log
        in: path
        required: true
        type: string
        description: At this time, only 'policy' logs are supported
        enum: [policy]
      responses:
        '200':
          description: OK
  "/logflush/{log}/id/{id}/interval/{interval}":
    delete:
      summary: Flushes a single log for a given interval
      operationId: createLogFlushWithIdAndInterval
      parameters:
      - name: id
        in: path
        required: true
        type: string
        description: ID of policy whose log will be flushed
      - name: log
        in: path
        required: true
        type: string
        description: At this time, only 'policy' logs are supported
        enum: [policy]
      - name: interval
        in: path
        required: true
        type: string
        description: Supported values are a combination of [Zero, One, Two, Three, Six] and [Days, Weeks, Months, Years]
      responses:
        '200':
          description: OK
  "/macapplications":
    get:
      summary: Finds all mac applications
      operationId: findMacapps
      parameters: []
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/mac_applications'
  "/macapplications/id/{id}":
    get:
      summary: Finds mac applications by ID
      operationId: findMacappsById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/mac_application'
    put:
      summary: Updates an existing mac application by ID
      operationId: updateMacappById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '201':
          description: Created
    post:
      summary: Creates a new mac application by ID
      operationId: createMacappById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/mac_application'
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes a mac application by ID
      operationId: deleteMacappById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '200':
          description: OK
  "/macapplications/name/{name}":
    get:
      summary: Finds mac applications by name
      operationId: findMacappsByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/mac_application'
    put:
      summary: Updates an existing mac application by name
      operationId: updateMacappByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name value to filter by
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes a mac application by name
      operationId: deleteMacappByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name value to filter by
      responses:
        '200':
          description: OK
  "/macapplications/id/{id}/subset/{subset}":
    get:
      summary: Display subsets of information for a mac application
      operationId: findMacappsByIdSubset
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID to filter by
      - name: subset
        in: path
        required: true
        type: string
        description: Subset to filter by
        enum: [General, Scope, SelfService, VPPCodes, VPP]
      responses:
        '200':
          description: OK
  "/managedpreferenceprofiles":
    get:
      summary: Finds all managed preference profiles
      operationId: findManagedPreferenceProfiles
      parameters: []
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/managed_preference_profiles'
  "/managedpreferenceprofiles/id/{id}":
    get:
      summary: Finds managed preference profiles by ID
      operationId: findManagedPreferenceProfilesById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/managed_preference_profile'
    put:
      summary: Updates an existing managed preference profiles by ID
      operationId: updateManagedPreferenceProfilesById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '201':
          description: Created
    post:
      summary: Creates a new managed preference profile by ID
      operationId: createManagedPreferenceProfileById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/managed_preference_profile'
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes a managed preference profiles by ID
      operationId: deleteManagedPreferenceProfilesById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '200':
          description: OK
  "/managedpreferenceprofiles/id/{id}/subset/{subset}":
    get:
      summary: Display subsets of information for a managed preference profile
      operationId: findManagedPreferenceProfilesByIdSubset
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID to filter by
      - name: subset
        in: path
        required: true
        type: string
        description: Subset to filter by
        enum: [General, Scope, Settings]
      responses:
        '200':
          description: OK
  "/managedpreferenceprofiles/name/{name}":
    get:
      summary: Finds managed preference profiles by name
      operationId: findManagedPreferenceProfilesByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/managed_preference_profile'
    put:
      summary: Updates an existing managed preference profiles by name
      operationId: updateManagedPreferenceProfilesByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name value to filter by
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes a managed preference profiles by name
      operationId: deleteManagedPreferenceProfilesByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name value to filter by
      responses:
        '200':
          description: OK
  "/mobiledeviceapplications":
    get:
      summary: Finds all mobile device applications
      operationId: findMobileDeviceApplications
      parameters: []
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/mobile_device_applications'
  "/mobiledeviceapplications/id/{id}":
    get:
      summary: Finds mobile device applications by ID
      operationId: findMobileDeviceApplicationsById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/mobile_device_application'
    put:
      summary: Updates an existing mobile device application by ID
      operationId: updateMobileDeviceApplicationById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '201':
          description: Created
    post:
      summary: Creates a new mobile device application by ID
      operationId: createMobileDeviceApplicationById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/mobile_device_application'
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes a mobile device application by ID
      operationId: deleteMobileDeviceApplicationById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '200':
          description: OK
  "/mobiledeviceapplications/bundleid/{bundleid}":
    get:
      summary: Finds mobile device applications by bundle ID
      operationId: findMobileDeviceApplicationsByBundleID
      parameters:
      - name: bundleid
        in: path
        required: true
        type: string
        description: Bundle ID to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/mobile_device_application'
    put:
      summary: Updates an existing mobile device application by bundle ID
      operationId: updateMobileDeviceApplicationByBundleID
      parameters:
      - name: bundleid
        in: path
        required: true
        type: string
        description: Bundle ID value to filter by
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes a mobile device application by bundle ID
      operationId: deleteMobileDeviceApplicationByBundleID
      parameters:
      - name: bundleid
        in: path
        required: true
        type: string
        description: Bundle ID value to filter by
      responses:
        '200':
          description: OK
  "/mobiledeviceapplications/bundleid/{bundleid}/version/{version}":
    get:
      summary: Finds mobile device applications by bundle ID and version
      operationId: findMobileDeviceApplicationsByBundleIDandVersion
      parameters:
      - name: bundleid
        in: path
        required: true
        type: string
        description: Bundle ID to filter by
      - name: version
        in: path
        required: true
        type: string
        description: Version to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/mobile_device_application'
    put:
      summary: Updates an existing mobile device application by bundle ID and version
      operationId: updateMobileDeviceApplicationByBundleIDandVersion
      parameters:
      - name: bundleid
        in: path
        required: true
        type: string
        description: Bundle ID value to filter by
      - name: version
        in: path
        required: true
        type: string
        description: Version to filter by
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes a mobile device application by bundle ID and version
      operationId: deleteMobileDeviceApplicationByBundleIDandVersion
      parameters:
      - name: bundleid
        in: path
        required: true
        type: string
        description: Bundle ID value to filter by
      - name: version
        in: path
        required: true
        type: string
        description: Version to filter by
      responses:
        '200':
          description: OK
  "/mobiledeviceapplications/name/{name}":
    get:
      summary: Finds mobile device applications by name
      operationId: findMobileDeviceApplicationsByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/mobile_device_application'
    put:
      summary: Updates an existing mobile device application by name
      operationId: updateMobileDeviceApplicationByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name value to filter by
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes a mobile device application by name
      operationId: deleteMobileDeviceApplicationByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name value to filter by
      responses:
        '200':
          description: OK
  "/mobiledeviceapplications/id/{id}/subset/{subset}":
    get:
      summary: Display subsets of information for a mobile device application
      operationId: findMobileDeviceAppsByIdSubset
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID to filter by
      - name: subset
        in: path
        required: true
        type: string
        description: Subset to filter by
        enum: [General, Scope, SelfService, VPPCodes, VPP, AppConfiguration]
      responses:
        '200':
          description: OK
  "/mobiledevicecommands":
    get:
      summary: Finds all mobile device commands
      operationId: findMobileDeviceCommands
      parameters: []
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/mobile_device_commands'
  "/mobiledevicecommands/id/{id}":
    get:
      summary: Finds a mobile device command by ID
      operationId: findMobileDeviceCommandsById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/mobile_device_command'
  "/mobiledevicecommands/uuid/{uuid}":
    get:
      summary: Finds a mobile device command by UUDI
      operationId: findMobileDeviceCommandsByUuid
      parameters:
      - name: uuid
        in: path
        required: true
        type: string
        description: UUID value to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/mobile_device_command'
  "/mobiledevicecommands/name/{name}":
    get:
      summary: Finds all mobile device commands by command name
      operationId: findMobileDeviceCommandsByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/mobile_device_command'
  "/mobiledevicecommands/command/{command}":
    get:
      summary: Finds all mobile device commands for specified command
      operationId: findMobileDeviceCommandsByCommand
      parameters:
      - name: command
        in: path
        required: true
        type: string
        description: Name to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/mobile_device_command'
  "/mobiledevicecommands/command":
    post:
      summary: Creates a new mobile device command
      operationId: createMobileDeviceCommand
      parameters:
      - name: body
        in: body
        required: true
        description: Command name
        schema:
          $ref: '#/definitions/mobile_device_command_post'
      responses:
        '201':
          description: Created
  "/mobiledevicecommands/command/{command}/id/{id_list}":
    post:
      summary: Creates a new mobile device command
      operationId: createMobileDeviceCommandURL
      parameters:
      - name: id_list
        in: path
        required: true
        type: string
        description: Mobile device ID values, multiple IDs may be separated by commas
      - name: command
        in: path
        required: true
        type: string
        description: Command to send device
        enum: [Settings, EraseDevice, ClearPasscode, UnmanageDevice, UpdateInventory, ClearRestrictionsPassword, SettingsEnableDataRoaming, SettingsDisableDataRoaming, SettingsEnableVoiceRoaming, SettingsDisableVoiceRoaming, SettingsEnableAppAnalytics, SettingsDisableAppAnalytics, SettingsEnableDiagnosticSubmission, SettingsDisableDiagnosticSubmission, BlankPush, ShutDownDevice (supervised only), RestartDevice (supervised only), PasscodeLockGracePeriod (shared iPad only)]
      responses:
        '201':
          description: Created
  "/mobiledevicecommands/command/DeviceName/{device_name}/id/{id_list}":
    post:
      summary: Creates a new command to set the name of a mobile device.
      operationId: createMobileDeviceNameCommandURL
      parameters:
      - name: id_list
        in: path
        required: true
        type: string
        description: Mobile device ID values, multiple IDs may be separated by commas
      - name: device_name
        in: path
        required: true
        type: string
        description: Device name to set
      responses:
        '201':
          description: Created
  "/mobiledevicecommands/command/DeviceLock/{lock_message}/id/{id_list}":
    post:
      summary: Sends a new lock command to a list of mobile devices
      operationId: createMobileDeviceLockCommandURL
      parameters:
      - name: id_list
        in: path
        required: true
        type: string
        description: Mobile device ID values, multiple IDs may be separated by commas
      - name: lock_message
        in: path
        required: true
        type: string
        description: Lock message for the DeviceLock command
      responses:
        '201':
          description: Created
  "/mobiledeviceconfigurationprofiles":
    get:
      summary: Finds all mobile device configuration profiles
      operationId: findMobileDeviceConfigurationProfiles
      parameters: []
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/mobile_device_configuration_profiles'
  "/mobiledeviceconfigurationprofiles/id/{id}":
    get:
      summary: Finds mobile device configuration profiles by ID
      operationId: findMobileDeviceConfigurationProfilesById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/mobile_device_configuration_profile'
    put:
      summary: Updates an existing mobile device configuration profile by ID
      operationId: updateMobileDeviceConfigurationProfileById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '201':
          description: Created
    post:
      summary: Creates a new mobile device configuration profile by ID
      operationId: createMobileDeviceConfigurationProfileById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/mobile_device_configuration_profile'
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes a mobile device configuration profile by ID
      operationId: deleteMobileDeviceConfigurationProfileById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '200':
          description: OK
  "/mobiledeviceconfigurationprofiles/name/{name}":
    get:
      summary: Finds mobile device configuration profiles by name
      operationId: findMobileDeviceConfigurationProfilesByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/mobile_device_configuration_profile'
    put:
      summary: Updates an existing mobile device configuration profile by name
      operationId: updateMobileDeviceConfigurationProfileByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name value to filter by
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes a mobile device configuration profile by name
      operationId: deleteMobileDeviceConfigurationProfileByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name value to filter by
      responses:
        '200':
          description: OK
  "/mobiledeviceconfigurationprofiles/id/{id}/subset/{subset}":
    get:
      summary: Display subsets of information for a mobile device configuration profile
      operationId: findMobileDeviceConfigurationProfilesByIdSubset
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID to filter by
      - name: subset
        in: path
        required: true
        type: string
        description: Subset to filter by
        enum: [General, Scope, SelfService]
      responses:
        '200':
          description: OK
  "/mobiledeviceenrollmentprofiles":
    get:
      summary: Finds all mobile device enrollment profiles
      operationId: findMobileDeviceEnrollmentProfiles
      parameters: []
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/mobile_device_enrollment_profiles'
  "/mobiledeviceenrollmentprofiles/id/{id}":
    get:
      summary: Finds mobile device enrollment profiles by ID
      operationId: findMobileDeviceEnrollmentProfilesById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/mobile_device_enrollment_profile'
    put:
      summary: Updates an existing mobile device enrollment profile by ID
      operationId: updateMobileDeviceEnrollmentProfileById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '201':
          description: Created
    post:
      summary: Creates a new mobile device enrollment profile by ID
      operationId: createMobileDeviceEnrollmentProfilesById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/mobile_device_enrollment_profile'
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes a mobile device enrollment profile by ID
      operationId: deleteMobileDeviceEnrollmentProfileById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '200':
          description: OK
  "/mobiledeviceenrollmentprofiles/invitation/{invitation}":
    get:
      summary: Finds mobile device enrollment profiles by invitation
      operationId: findMobileDeviceEnrollmentProfilesByInvitation
      parameters:
      - name: invitation
        in: path
        required: true
        type: string
        description: Invitation value to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/mobile_device_enrollment_profile'
    put:
      summary: Updates an existing mobile device enrollment profile by invitation
      operationId: updateMobileDeviceEnrollmentProfileByInvitation
      parameters:
      - name: invitation
        in: path
        required: true
        type: string
        description: Invitation value to filter by
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes a mobile device enrollment profile by invitation
      operationId: deleteMobileDeviceEnrollmentProfileByInvitation
      parameters:
      - name: invitation
        in: path
        required: true
        type: string
        description: Invitation value to filter by
      responses:
        '200':
          description: OK
  "/mobiledeviceenrollmentprofiles/name/{name}":
    get:
      description: Finds mobile device enrollment profiles by name
      operationId: findMobileDeviceEnrollmentProfilesByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/mobile_device_enrollment_profile'
    put:
      summary: Updates an existing mobile device enrollment profile by name
      operationId: updateMobileDeviceEnrollmentProfileByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name value to filter by
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes a mobile device enrollment profile by name
      operationId: deleteMobileDeviceEnrollmentProfileByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name value to filter by
      responses:
        '200':
          description: OK
  "/mobiledeviceenrollmentprofiles/id/{id}/subset/{subset}":
    get:
      summary: Display subsets of information for an enrollment profile
      operationId: findMobileDeviceEnrollmentProfilesByIdSubset
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID to filter by
      - name: subset
        in: path
        required: true
        type: string
        description: Subset to filter by
        enum: [General, Location, Purchasing, Attachments]
      responses:
        '200':
          description: OK
  "/mobiledeviceextensionattributes":
    get:
      summary: Finds all mobile device extension attributes
      operationId: findMobiledeviceextensionattributes
      parameters: []
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/mobile_device_extension_attributes'
  "/mobiledeviceextensionattributes/id/{id}":
    get:
      summary: Finds mobile device extension attributes by ID
      operationId: findMobiledeviceextensionattributesById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/mobile_device_extension_attribute'
    put:
      summary: Updates an existing mobile device extension attribute by ID
      operationId: updateMobiledeviceextensionattributeById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '201':
          description: Created
    post:
      summary: Creates a new mobile device extension attribute by ID
      operationId: createMobiledeviceextensionattributeById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/mobile_device_extension_attribute'
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes a mobile device extension attribute by ID
      operationId: deleteMobiledeviceextensionattributeById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '200':
          description: OK
  "/mobiledeviceextensionattributes/name/{name}":
    get:
      summary: Finds mobiledeviceextensionattributes by name
      operationId: findMobiledeviceextensionattributesByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/mobile_device_extension_attribute'
    put:
      summary: Updates an existing mobile device extension attribute by name
      operationId: updateMobiledeviceextensionattributeByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name value to filter by
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes a mobile device extension attribute by name
      operationId: deleteMobiledeviceextensionattributeByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name value to filter by
      responses:
        '200':
          description: OK
  "/mobiledevicegroups":
    get:
      summary: Finds all mobile device groups
      operationId: findMobileDeviceGroups
      parameters: []
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/mobile_device_groups'
  "/mobiledevicegroups/id/{id}":
    get:
      summary: Finds mobile device groups by ID
      operationId: findMobileDeviceGroupsById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/mobile_device_group'
    put:
      summary: Updates an existing mobile device group by ID
      operationId: updateMobileDeviceGroupById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '201':
          description: Created
    post:
      summary: Creates a new mobile device group by ID
      operationId: createMobileDeviceGroupById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/mobile_device_group'
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes a mobile device group by ID
      operationId: deleteMobileDeviceGroupById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '200':
          description: OK
  "/mobiledevicegroups/name/{name}":
    get:
      summary: Finds mobile device groups by name
      operationId: findMobileDeviceGroupsByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/mobile_device_group'
    put:
      summary: Updates an existing mobile device group by name
      operationId: updateMobileDeviceGroupByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name value to filter by
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes a mobile device group by name
      operationId: deleteMobileDeviceGroupByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name value to filter by
      responses:
        '200':
          description: OK
  "/mobiledevicehistory/id/{id}":
    get:
      summary: Finds mobile device history by ID
      operationId: findMobileDeviceHistoryById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/mobile_device_history'
  "/mobiledevicehistory/name/{name}":
    get:
      summary: Finds mobile device history by name
      operationId: findMobileDeviceHistoryByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/mobile_device_history'
  "/mobiledevicehistory/udid/{udid}":
    get:
      summary: Finds mobile device history by UDID
      operationId: findMobileDeviceHistoryByUDID
      parameters:
      - name: udid
        in: path
        required: true
        type: string
        description: UDID to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/mobile_device_history'
  "/mobiledevicehistory/serialnumber/{serialnumber}":
    get:
      summary: Finds mobile device history by serial number
      operationId: findMobileDeviceHistoryBySerialNumber
      parameters:
      - name: serialnumber
        in: path
        required: true
        type: string
        description: Serial number to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/mobile_device_history'
  "/mobiledevicehistory/macaddress/{macaddress}":
    get:
      summary: Finds mobile device history by wifi mac address
      operationId: findMobileDeviceHistoryByMacAddress
      parameters:
      - name: macaddress
        in: path
        required: true
        type: string
        description: Mac address to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/mobile_device_history'
  "/mobiledevicehistory/id/{id}/subset/{subset}":
    get:
      summary: Display subsets of information for a mobile device history
      operationId: findMobileDeviceHistoryByIdSubset
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID to filter by
      - name: subset
        in: path
        required: true
        type: string
        description: Subset to filter by
        enum: [General, ManagementCommands, UserLocation, Audits, Applications, Ebooks]
      responses:
        '200':
          description: OK
  "/mobiledevices":
    get:
      summary: Finds all mobile devices
      operationId: findMobileDevices
      parameters: []
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/mobile_devices'
  "/mobiledevices/match/{match}":
    get:
      summary: Searches for mobile devices that match the provided parameter
      operationId: matchMobileDevices
      parameters:
      - name: match
        in: path
        required: true
        type: string
        description: Name, mac address, etc. to filter by. Match uses the same format
          as the general search in the JSS.
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/mobile_device'
  "/mobiledevices/id/{id}":
    get:
      summary: Finds mobile devices by ID
      operationId: findMobileDevicesById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/mobile_device'
    put:
      summary: Updates an existing mobile device by ID
      operationId: updateMobileDeviceById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '201':
          description: Created
    post:
      summary: Creates a new mobile device by ID
      operationId: createMobileDeviceById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/mobile_device'
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes a mobile device by ID
      operationId: deleteMobileDeviceById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '200':
          description: OK
  "/mobiledevices/name/{name}":
    get:
      summary: Finds mobile devices by name
      operationId: findMobileDevicesByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/mobile_device'
    put:
      summary: Updates an existing mobile device by name
      operationId: updateMobileDeviceByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name value to filter by
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes a mobile device by name
      operationId: deleteMobileDeviceByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name value to filter by
      responses:
        '200':
          description: OK
  "/mobiledevices/udid/{udid}":
    get:
      summary: Finds mobile devices by UDID
      operationId: findMobileDevicesByUDID
      parameters:
      - name: udid
        in: path
        required: true
        type: string
        description: UDID to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/mobile_device'
    put:
      summary: Updates an existing mobile device by UDID
      operationId: updateMobileDeviceByUDID
      parameters:
      - name: udid
        in: path
        required: true
        type: string
        description: UDID value to filter by
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes a mobile device by UDID
      operationId: deleteMobileDeviceByUDID
      parameters:
      - name: udid
        in: path
        required: true
        type: string
        description: UDID value to filter by
      responses:
        '200':
          description: OK
  "/mobiledevices/serialnumber/{serialnumber}":
    get:
      summary: Finds mobile devices by serial number
      operationId: findMobileDevicesBySerialNumber
      parameters:
      - name: serialnumber
        in: path
        required: true
        type: string
        description: Serial number to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/mobile_device'
    put:
      summary: Updates an existing mobile device by serial number
      operationId: updateMobileDeviceBySerialNumber
      parameters:
      - name: serialnumber
        in: path
        required: true
        type: string
        description: Serial number value to filter by
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes a mobile device by serial number
      operationId: deleteMobileDeviceBySerialNumber
      parameters:
      - name: serialnumber
        in: path
        required: true
        type: string
        description: Serial number value to filter by
      responses:
        '200':
          description: OK
  "/mobiledevices/macaddress/{macaddress}":
    get:
      summary: Finds mobile devices by Mac address
      operationId: findMobileDevicesByMacAddress
      parameters:
      - name: macaddress
        in: path
        required: true
        type: string
        description: Mac address to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/mobile_device'
    put:
      summary: Updates an existing mobile device by Mac address
      operationId: updateMobileDeviceByMacAddress
      parameters:
      - name: macaddress
        in: path
        required: true
        type: string
        description: Mac address value to filter by
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes a mobile device by Mac address
      operationId: deleteMobileDeviceByMacAddress
      parameters:
      - name: macaddress
        in: path
        required: true
        type: string
        description: Mac address value to filter by
      responses:
        '200':
          description: OK
  "/mobiledevices/id/{id}/subset/{subset}":
    get:
      summary: Display subsets of information for a mobile device
      operationId: findMobileDevicesByIdSubset
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID to filter by
      - name: subset
        in: path
        required: true
        type: string
        description: Subset to filter by
        enum: [General, Location, Purchasing, Applications, Security, Network, Certificates, ConfigurationProfiles, ProvisioningProfiles, MobileDeviceGroups, ExtensionAttributes]
      responses:
        '200':
          description: OK
  "/netbootservers":
    get:
      summary: Finds all netboot servers
      operationId: findNetbootServers
      parameters: []
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/netboot_servers'
  "/netbootservers/id/{id}":
    get:
      summary: Finds netboot servers by ID
      operationId: findNetbootServersById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/netboot_server'
    put:
      summary: Updates an existing netboot server by ID
      operationId: updateNetbootServerById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '201':
          description: Created
    post:
      summary: Creates a new netboot server by ID
      operationId: createNetbootServerById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/netboot_server'
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes a netboot server by ID
      operationId: deleteNetbootServerById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '200':
          description: OK
  "/netbootservers/name/{name}":
    get:
      summary: Finds netboot servers by name
      operationId: findNetbootServersByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/netboot_server'
    put:
      summary: Updates an existing netboot server by name
      operationId: updateNetbootServerByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name value to filter by
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes a netboot server by name
      operationId: deleteNetbootServerByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name value to filter by
      responses:
        '200':
          description: OK
  "/networksegments":
    get:
      summary: Finds all network segments
      operationId: findNetworkSegments
      parameters: []
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/network_segments'
  "/networksegments/id/{id}":
    get:
      summary: Finds network segments by ID
      operationId: findNetworkSegmentsById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/network_segment'
    put:
      summary: Updates an existing network segment by ID
      operationId: updateNetworkSegmentById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '201':
          description: Created
    post:
      summary: Creates a new network segment by ID
      operationId: createNetworkSegmentById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/network_segment'
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes a network segment by ID
      operationId: deleteNetworkSegmentById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '200':
          description: OK
  "/networksegments/name/{name}":
    get:
      summary: Finds network segments by name
      operationId: findNetworkSegmentsByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/network_segment'
    put:
      summary: Updates an existing network segment by name
      operationId: updateNetworkSegmentByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name value to filter by
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes a network segment by name
      operationId: deleteNetworkSegmentByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name value to filter by
      responses:
        '200':
          description: OK
  "/osxconfigurationprofiles":
    get:
      summary: Finds all OS X configuration profiles
      operationId: findOsxConfigurationProfiles
      parameters: []
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/os_x_configuration_profiles'
  "/osxconfigurationprofiles/id/{id}":
    get:
      summary: Finds OS X configuration profiles by ID
      operationId: findOsxConfigurationProfilesById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/os_x_configuration_profile'
    put:
      summary: Updates an existing OS X configuration profile by ID
      operationId: updateOsxConfigurationProfileById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '201':
          description: Created
    post:
      summary: Creates a new OS X configuration profile by ID
      operationId: createOsxConfigurationProfileById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/os_x_configuration_profile'
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes a OS X configuration profile by ID
      operationId: deleteOsxConfigurationProfileById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '200':
          description: OK
  "/osxconfigurationprofiles/name/{name}":
    get:
      summary: Finds OS X configuration profiles by name
      operationId: findOsxConfigurationProfilesByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/os_x_configuration_profile'
    put:
      summary: Updates an existing OS X configuration profile by name
      operationId: updateOsxConfigurationProfileByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name value to filter by
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes a OS X configuration profile by name
      operationId: deleteOsxConfigurationProfileByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name value to filter by
      responses:
        '200':
          description: OK
  "/osxconfigurationprofiles/id/{id}/subset/{subset}":
    get:
      summary: Display subsets of information for an OS X configuration profile
      operationId: findOsxConfigurationProfilesByIdSubset
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID to filter by
      - name: subset
        in: path
        required: true
        type: string
        description: Subset to filter by
        enum: [General, Scope, SelfService]
      responses:
        '200':
          description: OK
  "/packages":
    get:
      summary: Finds all packages
      operationId: findPackages
      parameters: []
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/packages'
  "/packages/id/{id}":
    get:
      summary: Finds packages by ID
      operationId: findPackagesById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/package'
    put:
      summary: Updates an existing package by ID
      operationId: updatePackageById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/package'
      responses:
        '201':
          description: Created
    post:
      summary: Creates a new package by ID
      operationId: createPackageById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes a package by ID
      operationId: deletePackageById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '200':
          description: OK
  "/packages/name/{name}":
    get:
      summary: Finds packages by name
      operationId: findPackagesByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/package'
    put:
      summary: Updates an existing package by name
      operationId: updatePackageByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name value to filter by
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes a package by name
      operationId: deletePackageByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name value to filter by
      responses:
        '200':
          description: OK
  "/patches":
    get:
      summary: Finds all patches
      operationId: findPatches
      parameters: []
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/patch_reporting_software_titles'
  "/patches/id/{id}":
    get:
      summary: Finds patches by ID
      operationId: findPatchesById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/software_title'
    put:
      summary: Updates a Patch Software Title by ID
      operationId: updateSoftwareTitlesById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to update by
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes a Patch Software Title by ID
      operationId: deleteSoftwareTitlesById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '200':
          description: OK
  "/patches/name/{name}":
    get:
      summary: Finds the first patch with the name provided
      operationId: findPatchesByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/software_title'
    put:
      summary: Updates a Patch Software Title by name
      operationId: updateSoftwareTitlesByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name value to update by
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes a Patch Software Title by name
      operationId: deleteSoftwareTitlesByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name value to filter by
      responses:
        '200':
          description: OK
  "/patches/id/{id}/version/{version}":
    get:
      summary: Display computers on a specific version
      operationId: findComputersByTitleVersion
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID to filter by
      - name: version
        in: path
        required: true
        type: string
        description: Version number to filter by
      responses:
        '200':
          description: OK
  "/peripherals":
    get:
      summary: Finds all peripherals
      operationId: findPeripherals
      parameters: []
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/peripherals'
  "/peripherals/id/{id}":
    get:
      summary: Finds peripherals by ID
      operationId: findPeripheralsById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/peripheral'
    put:
      summary: Updates an existing peripheral by ID
      operationId: updatePeripheralById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '201':
          description: Created
    post:
      summary: Creates a new peripheral by ID
      operationId: createPeripheralById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/peripheral'
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes a peripheral by ID
      operationId: deletePeripheralById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '200':
          description: OK
  "/peripherals/id/{id}/subset/{subset}":
    get:
      summary: Display subsets of information for a peripheral
      operationId: findPeripheralsByIdSubset
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID to filter by
      - name: subset
        in: path
        required: true
        type: string
        description: Subset to filter by
        enum: [General, Location, Purchasing, Attachments]
      responses:
        '200':
          description: OK
  "/peripheraltypes":
    get:
      summary: Finds all peripheral types
      operationId: findPeripheralTypes
      parameters: []
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/peripheral_types'
  "/peripheraltypes/id/{id}":
    get:
      summary: Finds peripheral types by ID
      operationId: findPeripheralTypesById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/peripheral_type'
    put:
      summary: Updates an existing peripheral by ID
      operationId: updatePeripheralTypeById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '201':
          description: Created
    post:
      summary: Creates a new peripheral by ID
      operationId: createPeripheralTypeById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/peripheral_type'
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes a peripheral by ID
      operationId: deletePeripheralTypeById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '200':
          description: OK
  "/policies":
    get:
      summary: Finds all policies
      operationId: findPolicies
      parameters: []
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/policies'
  "/policies/id/{id}":
    get:
      summary: Finds policies by ID
      operationId: findPoliciesById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/policy'
    put:
      summary: Updates an existing policy by ID
      operationId: updatePolicyById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '201':
          description: Created
    post:
      summary: Creates a new policy by ID
      operationId: createPolicyById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/policy'
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes a policy by ID
      operationId: deletePolicyById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '200':
          description: OK
  "/policies/name/{name}":
    get:
      summary: Finds policies by name
      operationId: findPoliciesByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/policy'
    put:
      summary: Updates an existing policy by name
      operationId: updatePolicyByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name value to filter by
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes a policy by name
      operationId: deletePolicyByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name value to filter by
      responses:
        '200':
          description: OK
  "/policies/id/{id}/subset/{subset}":
    get:
      summary: Display subsets of information for a policy
      operationId: findPoliciesByIdSubset
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID to filter by
      - name: subset
        in: path
        required: true
        type: string
        description: Subset to filter by
        enum: [General, Scope, SelfService, PackageConfiguration, Scripts, Printers, DockItems, AccountMaintenance, Reboot, Maintenance, FilesProcesses, UserInteraction, DiskEncryption]
      responses:
        '200':
          description: OK
  "/policies/category/{category}":
    get:
      summary: Finds all policies by category
      operationId: findPoliciesByCategory
      parameters:
      - name: category
        in: path
        required: true
        type: string
        description: Category to filter by
      responses:
        '200':
          description: OK
  "/policies/createdBy/{createdBy}":
    get:
      summary: Finds all policies by type
      operationId: findPoliciesByType
      parameters:
      - name: createdBy
        in: path
        required: true
        type: string
        description: Type to filter by
        enum: [jss, casper]
      responses:
        '200':
          description: OK
  "/printers":
    get:
      summary: Finds all printers
      operationId: findPrinters
      parameters: []
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/printers'
  "/printers/id/{id}":
    get:
      summary: Finds printers by ID
      operationId: findPrintersById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/printer'
    put:
      summary: Updates an existing printer by ID
      operationId: updatePrinterById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '201':
          description: Created
    post:
      summary: Creates a new printer by ID
      operationId: createPrinterById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/printer'
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes a printer by ID
      operationId: deletePrinterById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '200':
          description: OK
  "/printers/name/{name}":
    get:
      summary: Finds printers by name
      operationId: findPrintersByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/printer'
    put:
      summary: Updates an existing printer by name
      operationId: updatePrinterByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name value to filter by
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes a printer by name
      operationId: deletePrinterByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name value to filter by
      responses:
        '200':
          description: OK
  "/removablemacaddresses":
    get:
      summary: Finds all removable Mac addresses
      operationId: findRemovableMacAddresses
      parameters: []
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/removable_mac_addresses'
  "/removablemacaddresses/id/{id}":
    get:
      summary: Finds removable Mac addresses by ID
      operationId: findRemovableMacAddressesById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/removable_mac_address'
    put:
      summary: Updates an existing removable Mac address by ID
      operationId: updateRemovableMacAddressById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '201':
          description: Created
    post:
      summary: Creates a new removable Mac address by ID
      operationId: createRemovableMacAddressById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/removable_mac_address'
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes a removable Mac address by ID
      operationId: deleteRemovableMacAddressById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '200':
          description: OK
  "/removablemacaddresses/name/{name}":
    get:
      summary: Finds removable Mac addresses by name
      operationId: findRemovableMacAddressesByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/removable_mac_address'
    put:
      summary: Updates an existing removable Mac address by name
      operationId: updateRemovableMacAddressByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name value to filter by
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes a removable Mac address by name
      operationId: deleteRemovableMacAddressByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name value to filter by
      responses:
        '200':
          description: OK
  "/restrictedsoftware":
    get:
      summary: Finds all restricted software
      operationId: findRestrictedSoftware
      parameters: []
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/restricted_software_all'
  "/restrictedsoftware/id/{id}":
    get:
      summary: Finds restricted software by ID
      operationId: findRestrictedSoftwareById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/restricted_software'
    put:
      summary: Updates an existing restricted software by ID
      operationId: updateRestrictedSoftwareById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '201':
          description: Created
    post:
      summary: Creates a new restricted software by ID
      operationId: createRestrictedSoftwareById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/restricted_software'
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes a restricted software by ID
      operationId: deleteRestrictedSoftwareById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '200':
          description: OK
  "/restrictedsoftware/name/{name}":
    get:
      summary: Finds restricted software by name
      operationId: findRestrictedSoftwareByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/restricted_software'
    put:
      summary: Updates an existing restricted software by name
      operationId: updateRestrictedSoftwareByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name value to filter by
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes a restricted software by name
      operationId: deleteRestrictedSoftwareByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name value to filter by
      responses:
        '200':
          description: OK
  "/scripts":
    get:
      summary: Finds all scripts
      operationId: findScripts
      parameters: []
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/scripts'
  "/scripts/id/{id}":
    get:
      summary: Finds scripts by ID
      operationId: findScriptsById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/script'
    put:
      summary: Updates an existing script by ID
      operationId: updateScriptById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '201':
          description: Created
    post:
      summary: Creates a new script by ID
      operationId: createScriptById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/script'
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes a script by ID
      operationId: deleteScriptById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '200':
          description: OK
  "/scripts/name/{name}":
    get:
      summary: Finds scripts by name
      operationId: findScriptsByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/script'
    put:
      summary: Updates an existing script by name
      operationId: updateScriptByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name value to filter by
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes a script by name
      operationId: deleteScriptByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name value to filter by
      responses:
        '200':
          description: OK
  "/sites":
    get:
      summary: Finds all sites
      operationId: findSites
      parameters: []
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/sites'
  "/sites/id/{id}":
    get:
      summary: Finds sites by ID
      operationId: findSitesById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/site'
    put:
      summary: Updates an existing site by ID
      operationId: updateSiteById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '201':
          description: Created
    post:
      summary: Creates a new site by ID
      operationId: createSiteById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/site'
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes a site by ID
      operationId: deleteSiteById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '200':
          description: OK
  "/sites/name/{name}":
    get:
      summary: Finds sites by name
      operationId: findSitesByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/site'
    put:
      summary: Updates an existing site by name
      operationId: updateSiteByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name value to filter by
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes a site by name
      operationId: deleteSiteByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name value to filter by
      responses:
        '200':
          description: OK
  "/smtpserver":
    get:
      summary: Finds the JSS SMTP server information
      operationId: findSMTPServer
      parameters: []
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/smtp_server'
    put:
      summary: Updates the JSS SMTP server information
      operationId: updateSMTPServer
      parameters: []
      responses:
        '201':
          description: Created
  "/softwareupdateservers":
    get:
      summary: Finds all software update servers
      operationId: findSoftwareUpdateServers
      parameters: []
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/software_update_servers'
  "/softwareupdateservers/id/{id}":
    get:
      summary: Finds software update servers by ID
      operationId: findSoftwareUpdateServersById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/software_update_server'
    put:
      summary: Updates an existing software update server by ID
      operationId: updateSoftwareUpdateServerById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '201':
          description: Created
    post:
      summary: Creates a new software update server by ID
      operationId: createSoftwareUpdateServerById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/software_update_server'
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes a software update server by ID
      operationId: deleteSoftwareUpdateServerById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '200':
          description: OK
  "/softwareupdateservers/name/{name}":
    get:
      summary: Finds software update servers by name
      operationId: findSoftwareUpdateServersByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/software_update_server'
    put:
      summary: Updates an existing software update server by name
      operationId: updateSoftwareUpdateServerByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name value to filter by
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes a software update server by name
      operationId: deleteSoftwareUpdateServerByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name value to filter by
      responses:
        '200':
          description: OK
  "/userextensionattributes":
    get:
      summary: Finds all user extension attributes
      operationId: findUserextensionattributes
      parameters: []
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/user_extension_attributes'
  "/userextensionattributes/id/{id}":
    get:
      summary: Finds user extension attributes by ID
      operationId: findUserextensionattributesById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/user_extension_attribute'
    put:
      summary: Updates an existing user extension attribute by ID
      operationId: updateUserextensionattributeById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '201':
          description: Created
    post:
      summary: Creates a new user extension attribute by ID
      operationId: createUserextensionattributeById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/user_extension_attribute'
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes a user extension attribute by ID
      operationId: deleteUserextensionattributeById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '200':
          description: OK
  "/userextensionattributes/name/{name}":
    get:
      summary: Finds user extension attributes by name
      operationId: findUserextensionattributesByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/user_extension_attribute'
    put:
      summary: Updates an existing user extension attribute by name
      operationId: updateUserextensionattributeByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name value to filter by
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes a user extension attribute by name
      operationId: deleteUserextensionattributeByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name value to filter by
      responses:
        '200':
          description: OK
  "/usergroups":
    get:
      summary: Finds all user groups
      operationId: findUserGroups
      parameters: []
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/user_groups'
  "/usergroups/id/{id}":
    get:
      summary: Finds user groups by ID
      operationId: findUserGroupsById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/user_group'
    put:
      summary: Updates user groups by ID
      operationId: updateUserGroupsById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '201':
          description: Created
    post:
      summary: Creates user groups by ID
      operationId: createUserGroupsById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/user_group'
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes user groups by ID
      operationId: deleteUserGroupsById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '200':
          description: OK
  "/usergroups/name/{name}":
    get:
      summary: Finds user groups by name
      operationId: findUserGroupsByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/user_group'
    put:
      summary: Updates user groups by name
      operationId: updateUserGroupsByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name value to filter by
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes user groups by name
      operationId: deleteUserGroupsByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name value to filter by
      responses:
        '200':
          description: OK
  "/users":
    get:
      summary: Finds all users
      operationId: findUsers
      parameters: []
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/users'
  "/users/id/{id}":
    get:
      summary: Finds users by ID
      operationId: findUsersById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/user'
    put:
      summary: Updates an existing user by ID
      operationId: updateUserById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '201':
          description: Created
    post:
      summary: Creates a new user by ID
      operationId: createUserById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/user'
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes a user by ID
      operationId: deleteUserById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '200':
          description: OK
  "/users/name/{name}":
    get:
      summary: Finds users by name
      operationId: findUsersByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/user'
    put:
      summary: Updates an existing user by name
      operationId: updateUserByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name value to filter by
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes a user by name
      operationId: deleteUserByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name value to filter by
      responses:
        '200':
          description: OK
  "/users/email/{email}":
    get:
      summary: Finds users by email address
      operationId: findUsersByEmailAddress
      parameters:
      - name: email
        in: path
        required: true
        type: string
        description: Email address to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/user'
    put:
      summary: Updates an existing user by email address
      operationId: updateUserByEmailAddress
      parameters:
      - name: email
        in: path
        required: true
        type: string
        description: Email address value to filter by
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes a user by email address
      operationId: deleteUserByEmailAddress
      parameters:
      - name: email
        in: path
        required: true
        type: string
        description: Email address value to filter by
      responses:
        '200':
          description: OK
  "/vppaccounts":
    get:
      summary: Finds all VPP Accounts
      operationId: findVPPAdminAccount
      parameters: []
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/vpp_accounts'
  "/vppaccounts/id/{id}":
    get:
      summary: Finds VPP Account by ID
      operationId: findVPPAdminAccountById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/vpp_account'
    put:
      summary: Updates a VPP account by ID
      operationId: updateVPPAdminAccountById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '201':
          description: Created
    post:
      summary: Creates a new VPP account by ID
      operationId: createVPPAdminAccountById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/vpp_account'
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes a VPP account by ID
      operationId: deleteVPPAdminAccountById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '200':
          description: OK
  "/vppassignments":
    get:
      summary: Finds all VPP Assignments
      operationId: findVPPAdminAssignment
      parameters: []
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/vpp_assignments'
  "/vppassignments/id/{id}":
    get:
      summary: Finds VPP Assignment by ID
      operationId: findAssignmentById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/vpp_assignment'
    put:
      summary: Updates a VPP assignment by ID
      operationId: updateAssignmentById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '201':
          description: Created
    post:
      summary: Creates a new VPP assignment by ID
      operationId: createAssignmentById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/vpp_assignment'
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes a VPP assignment by ID
      operationId: deleteAssignmentById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '200':
          description: OK
  "/vppinvitations":
    get:
      summary: Finds all VPP Invitations
      operationId: findVPPAdminInvitation
      parameters: []
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/vpp_invitations'
  "/vppinvitations/id/{id}":
    get:
      summary: Finds a VPP Invitation by ID
      operationId: findInvitationById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/vpp_invitation'
    put:
      summary: Updates a VPP invitation by ID
      operationId: updateInvitationById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '201':
          description: Created
    post:
      summary: Creates a new VPP invitation by ID
      operationId: createInvitationById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/vpp_invitation'
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes a VPP invitation by ID
      operationId: deleteInvitationById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '200':
          description: OK
  "/vppinvitations/id/{id}/subset/{subset}":
    get:
      summary: Display subsets of information for a VPP invitation
      operationId: findInvitationsByIdSubset
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID to filter by
      - name: subset
        in: path
        required: true
        type: string
        description: Subset to filter by
        enum: [General, Scope, InvitationUsages]
      responses:
        '200':
          description: OK
  "/webhooks":
    get:
      summary: Finds all webhooks
      operationId: findWebhooks
      parameters: []
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/webhooks'
  "/webhooks/id/{id}":
    get:
      summary: Finds webhooks by ID
      operationId: findWebhooksById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/webhook'
    put:
      summary: Updates an existing webhook by ID
      operationId: updateWebhookById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '201':
          description: Created
    post:
      summary: Creates a new webhook by ID
      operationId: createWebhookById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/webhook'
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes a webhook by ID
      operationId: deleteWebhookById
      parameters:
      - name: id
        in: path
        required: true
        type: integer
        description: ID value to filter by
      responses:
        '200':
          description: OK
  "/webhooks/name/{name}":
    get:
      summary: Finds webhooks by name
      operationId: findWebhooksByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name to filter by
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/webhook'
    put:
      summary: Updates an existing webhook by name
      operationId: updateWebhookByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name value to filter by
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes a webhook by name
      operationId: deleteWebhookByName
      parameters:
      - name: name
        in: path
        required: true
        type: string
        description: Name value to filter by
      responses:
        '200':
          description: OK
definitions:
  account:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
        example: John Smith
        description: Name of the account
    required:
      - name
  accounts:
    type: object
    properties:
      users:
        type: object
        properties:
          user:
            type: object
            properties:
              id:
                type: integer
              name:
                type: string
                example: Steve Jobs
                description: Name of the account
            required:
              - name
      groups:
        type: object
        properties:
          group:
            type: object
            properties:
              id:
                type: integer
              name:
                type: string
                example: Information Technology
                description: Name of the group
            required:
              - name
  activation_code:
    type: object
    properties:
      organization_name:
        type: string
        example: Jamf Software LLC
      code:
        type: string
        example: QAPY-BP89-PJEH-87P8-0P89-PQ0A-FT68-00QA
  advanced_computer_search:
    type: object
    properties:
      id:
        type: integer
      name:
        description: Name of the advanced computer search
        type: string
        example: Advanced Search Name
      view_as:
        type: string
        example: Standard Web Page
      sort_1:
        type: string
      sort_2:
        type: string
      sort_3:
        type: string
      criteria:
        type: object
        properties:
          criterion:
            $ref: '#/definitions/criterion'
      display_fields:
        type: object
        properties:
          display_field:
            type: object
            properties:
              name:
                type: string
                example: IP Address
                description: Name of the display field
      computers:
        type: object
        properties:
          computer:
            type: object
            properties:
              id:
                type: integer
              name:
                type: string
                example: Joes iMac
                description: Name of the computer
              udid:
                type: string
                example: 55900BDC-347C-58B1-D249-F32244B11D30
              Computer_Name:
                type: string
                example: Joes iMac
      site:
          $ref: '#/definitions/site'
    required:
      - name
  advanced_computer_searches:
    type: object
    properties:
      advanced_computer_search:
        $ref: '#/definitions/id_name'
  advanced_mobile_device_search:
    type: object
    properties:
      id:
        type: integer
      name:
        description: Name of the advanced mobile device search
        type: string
        example: Advanced Search Name
      view_as:
        type: string
        example: Standard Web Page
      sort_1:
        type: string
      sort_2:
        type: string
      sort_3:
        type: string
      criteria:
        type: object
        properties:
          criterion:
            $ref: '#/definitions/criterion'
      display_fields:
        type: object
        properties:
          display_field:
            type: object
            properties:
              name:
                type: string
                example: IP Address
                description: Name of the display field
      mobile_devices:
        type: object
        properties:
          mobile_device:
            type: object
            properties:
              id:
                type: integer
              name:
                type: string
                example: Tinas iPad
                description: Name of the mobile device
              udid:
                type: string
              Display_Name:
                type: string
                example: Tinas iPad
      site:
          $ref: '#/definitions/site'
    required:
      - name
  advanced_mobile_device_searches:
    type: object
    properties:
      advanced_mobile_device_search:
        $ref: '#/definitions/advanced_mobile_device_search'
  advanced_user_search:
    title: advanced_user_search
    type: object
    properties:
      id:
        type: integer
      name:
        description: Name of the advanced user search
        type: string
        example: Advanced Search Name
      criteria:
        type: object
        properties:
          criterion:
            $ref: '#/definitions/criterion'
      users:
        type: object
        properties:
          user:
            type: object
            properties:
              id:
                type: integer
              name:
                type: string
                example: Ted Johnson
                description: Name of the user
              Username:
                type: string
                example: Ted Johnson
      display_fields:
        type: object
        properties:
          display_field:
            type: object
            properties:
              name:
                type: string
                example: Email Address
                description: Name of the display field
      site:
          $ref: '#/definitions/site'
    required:
      - name
  advanced_user_searches:
    type: object
    properties:
      advanced_user_search:
        $ref: '#/definitions/advanced_user_search'
  allowed_file_extension:
    type: object
    properties:
      id:
        type: integer
      extension:
        description: File extension
        type: string
        example: jpg
    required:
      - extension
  allowed_file_extensions:
    properties:
      allowed_file_extension:
        $ref: '#/definitions/allowed_file_extension'
  attachment:
    type: object
    properties:
      id:
        type: integer
      filename:
        type: string
        example: icon.png
      uri:
        type: string
        example: https://example.jamfcloud/attachment.html?id=1&amp;o=r
  building:
    type: object
    properties:
      id:
        type: integer
      name:
        description: Name of the building
        type: string
        example: Empire State Building
    required:
      - name
  buildings:
    properties:
      building:
        $ref: '#/definitions/building'
  byoprofile:
    type: object
    properties:
      general:
        type: object
        properties:
          id:
            type: integer
          name:
            type: string
            example: Personal Device Profile
            description: Name of the BYO profile
          site:
            $ref: '#/definitions/site'
          enabled:
            type: boolean
          description:
            type: string
            example: Used for Android or iOS BYO device enrollments
        required:
          - name
  byoprofiles:
    properties:
      byoprofile:
        $ref: '#/definitions/id_name'
  categories:
    properties:
      category:
        $ref: '#/definitions/category'
  category:
    title: category
    type: object
    properties:
      id:
        type: integer
      name:
        description: Name of the category
        type: string
        example: Applications
      priority:
        type: integer
        default: 9
    required:
      - name
  class:
    title: class
    type: object
    properties:
      id:
        type: integer
      source:
        type: string
      name:
        description: Name of the class
        type: string
        example: Math 101
      description:
        type: string
      site:
        $ref: '#/definitions/site'
      mobile_device_group:
        $ref: '#/definitions/id_name'
      students:
        type: object
        properties:
          student:
            type: string
            example: Joey
            description: Name of the student
      teachers:
        type: object
        properties:
          teacher:
            type: string
            example: Mr. Smith
            description: Name of the teacher
      teacher_ids:
        type: object
        properties:
          id:
            type: integer
      student_group_ids:
        type: object
        properties:
          id:
            type: integer
      teacher_group_ids:
        type: object
        properties:
          id:
            type: integer
      mobile_devices:
        type: object
        properties:
          mobile_device:
            type: object
            properties:
              name:
                type: string
                example: Tinas iPad
                description: Name of the device
              udid:
                type: string
                example: 55900BDC-347C-58B1-D249-F32244B11D30
              wifi_mac_address:
                type: string
                example: E0:AC:CB:97:36:G4
    required:
    - name
  classes:
    properties:
      class:
        type: object
        properties:
          id:
            type: integer
          name:
            type: string
            example: Biology 101
            description: Name of the class
          description:
            type: string
  commandflush:
    type: object
    properties:
      status:
        type: string
      mobile_devices:
        type: object
        properties:
          mobile_device:
            type: object
            properties:
              id:
                type: integer
            required:
            - id
    required:
    - status
  computer_check_in:
    type: object
    properties:
      check_in_frequency:
        type: integer
        description: Measured in minutes
        enum:
          - 60
          - 30
          - 15
          - 5
      create_startup_script:
        type: boolean
      log_startup_event:
        type: boolean
      check_for_policies_at_startup:
        type: boolean
      apply_computer_level_managed_preferences:
        type: boolean
      ensure_ssh_is_enabled:
        type: boolean
      create_login_logout_hooks:
        type: boolean
      log_username:
        type: boolean
      check_for_policies_at_login_logout:
        type: boolean
      apply_user_level_managed_preferences:
        type: boolean
      hide_restore_partition:
        type: boolean
      perform_login_actions_in_background:
        type: boolean
      display_status_to_user:
        type: boolean
  computer_command:
    type: object
    properties:
      general:
        type: object
        properties:
          command:
            description: Command type
            type: string
            enum: [DeviceLock, EraseDevice, UnmanageDevice, BlankPush]
        required:
          - command
      computers:
        type: object
        properties:
          computer:
            type: object
            properties:
              id:
                type: integer
            required:
              - id
  computer_commands:
    type: object
    properties:
      computer_command:
        type: object
        properties:
          id:
            type: integer
          command:
            description: Command type
            type: string
            example: EraseDevice
  computer_configuration:
    type: object
    properties:
      general:
        type: object
        properties:
          id:
            type: integer
          name:
            description: Configuration name
            type: string
            example: High Sierra Base OS
          description:
            type: string
          type:
            type: string
            enum: [Standard, Smart]
            description: Type of configuration
          parent:
            type: string
            description: Name of the parent configuration (for Smart configurations)
          packages:
            properties:
              package:
                $ref: '#/definitions/package'
          scripts:
            properties:
              script:
                $ref: '#/definitions/script'
          printers:
            properties:
              printer:
                $ref: '#/definitions/printer'
          directory_bindings:
            properties:
              directory_binding:
                $ref: '#/definitions/directory_binding'
          management:
            type: object
            properties:
              username:
                type: string
                example: casperadministrator
                description: Username of the management account
              password:
                type: string
                description: Password of the management account
              create_account:
                type: boolean
              hide_account:
                type: boolean
              allow_ssh_for_management_only:
                type: boolean
          homepage:
            type: string
            example: https://www.jamf.com
          partitions:
            type: object
            properties:
              partition:
                properties:
                  name:
                    type: string
                    example: Macintosh HD
                    description: Name of additional partition
                  size_gb:
                    type: integer
                  maximum_percentage:
                    type: integer
                    description: Maximum percentage of space to allow the partition to take up on the target drive
                  format:
                    type: string
                    example: Journaled HFS+
                    description: Format to use for the partition
                  is_restore_partition:
                    type: boolean
                  computer_configuration:
                    type: string
                    example: Recovery HD
                    description: Configuration to use to image the partition
                  reimage:
                    type: boolean
                  append_to_name:
                    type: string
                    example: Lab-100
                    description: Text to append to the computer name
        required:
          - name
  computer_configurations:
    type: object
    properties:
      computer_configuration:
        type: object
        properties:
          id:
            type: integer
          name:
            description: Configuration name
            type: string
            example: 10.12 Base OS
        required:
          - name
  computer_extension_attribute:
    type: object
    properties:
      id:
        type: integer
      name:
        description: Extension attribute name
        type: string
        example: Extension Attribute Name
      description:
        type: string
      data_type:
        type: string
        enum: [String, Integer, Date]
      input_type:
        type: object
        properties:
          type:
            type: string
            enum: [script, Text Field, LDAP Mapping, Pop-up Menu]
      inventory_display:
        type: string
        enum: [General, Hardware, Operating System, User and Location, Purchasing, Extension Attributes]
      recon_display:
        type: string
        enum: [Computer, User and Location, Purchasing, Extension Attributes]
    required:
      - name
  computer_extension_attributes:
    properties:
      computer_extension_attribute:
        $ref: '#/definitions/id_name'
  computer_group:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
        example: Group Name
      is_smart:
        type: boolean
      site:
        $ref: '#/definitions/site'
      criteria:
        properties:
          criterion:
            $ref: '#/definitions/criterion'
      computers:
        type: object
        properties:
          computer:
            type: object
            properties:
              id:
                type: integer
              name:
                type: string
              mac_address:
                type: string
              alt_mac_address:
                type: string
              serial_number:
                type: string
    required:
      - name
      - is_smart
  computer_groups:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
        example: Group Name
      is_smart:
        type: boolean
  computer_hardware_software_reports:
    type: object
    properties:
      hardware_report:
        type: object
        properties:
          date_time:
            type: string
          date_time_epoch:
            type: integer
          date_time_utc:
            type: string
          operating_system:
            type: string
          service_pack:
            type: string
          NIC_speed:
            type: string
          optical_drive:
            type: string
          make:
            type: string
          model_identifier:
            type: string
          serial_number:
            type: string
          processor_speed_mhz:
            type: integer
          processor_count:
            type: integer
          core_count:
            type: integer
          total_ram_mb:
            type: integer
          open_ram_slots:
            type: integer
          total_harddrive_size:
            type: string
          boot_partition_used_percent:
            type: integer
      font_report:
        type: object
        properties:
          date_time:
            type: string
          date_time_epoch:
            type: integer
          date_time_utc:
            type: string
          type:
            type: string
          name:
            type: string
          version:
            type: string
          path:
            type: string
      software_report:
        type: object
        properties:
          date_time:  
            type: string
          date_time_epoch:
            type: integer
          date_time_utc:
            type: string
          type:
            type: string
          name:
            type: string
          version:
            type: string
      plugin_report:
        type: object
        properties:
          date_time:
            type: string
          date_time_epoch:
            type: integer
          date_time_utc:
            type: string
          type:
            type: string
          name:
            type: string
          version:
            type: string
          path:
            type: string
  computer_history:
    type: object
    properties:
      general:
        type: object
        properties:
          id:
            type: integer
          name:
            type: string
          udid:
            type: string
          serial_number:
            type: string
          mac_address:
            type: string
  computer_inventory_collection:
    type: object
    properties:
      local_user_accounts:
        type: boolean
      home_directory_sizes:
        type: boolean
      hidden_accounts:
        type: boolean
      printers:
        type: boolean
      active_services:
        type: boolean
      mobile_device_app_purchasing_info:
        type: boolean
      computer_location_information:
        type: boolean
      package_receipts:
        type: boolean
      available_software_updates:
        type: boolean
      inclue_applications:
        type: boolean
      inclue_fonts:
        type: boolean
      inclue_plugins:
        type: boolean
      applications:
        type: object
        properties:
          application:
            type: object
            properties:
              path:
                type: string
                example: ~/Applications
              platform:
                type: string
                enum:
                - Mac
                - Windows
      fonts:
        type: object
        properties:
          font:
            type: object
            properties:
              path:
                type: string
                example: ~/Library/Fonts
              platform:
                type: string
                enum:
                - Mac
                - Windows
      plugins:
        type: object
        properties:
          plugin:
            type: object
            properties:
              path:
                type: string
                example: ~/Library/Internet Plug-Ins
              platform:
                type: string
                enum:
                - Mac
                - Windows
  computer_management:
    type: object
    properties:
      general:
        type: object
        properties:
          id:
            type: integer
          name:
            type: string
          udid:
            type: string
          serial_number:
            type: string
          mac_address:
            type: string
  computers:
    properties:
      computer:
        $ref: '#/definitions/id_name'
  computers_basic:
    type: object
    title: computers
    xml:
      name: computers
    properties:
      computer:
        type: object
        properties:
          id:
            type: integer
          name:
            type: string
          managed:
            type: boolean
          username:
            type: string
          model:
            type: string
          department:
            type: string
          building:
            type: string
          mac_address:
            type: string
          udid:
            type: string
          serial_number:
            type: string
          report_date_utc:
            type: string
          report_date_epoch:
            type: integer
  computer:
    type: object
    properties:
      general:
        type: object
        properties:
          id:
            type: integer
          name:
            type: string
          mac_address:
            type: string
          alt_mac_address:
            type: string
          ip_address:
            type: string
          last_reported_ip:
            type: string
          serial_number:
            type: string
          udid:
            type: string
          jamf_version:
            type: string
          platform:
            type: string
          barcode_1:
            type: string
          barcode_2:
            type: string
          asset_tag:
            type: string
          remote_management:
            type: object
            properties:
              managed:
                type: boolean
              management_username:
                type: string
          mdm_capable:
            type: boolean
          mdm_capable_users:
            type: object
            properties:
              mdm_capable_user:
                type: string
          report_date:
            type: string
          report_date_epoch:
            type: integer
          report_date_utc:
            type: string
          last_contact_time:
            type: string
          last_contact_time_epoch:
            type: integer
          last_contact_time_utc:
            type: string
          initial_entry_date:
            type: string
          initial_entry_date_epoch:
            type: integer
          initial_entry_date_utc:
            type: string
          last_cloud_backup_date_epoch:
            type: integer
          last_cloud_backup_date_utc:
            type: string
          last_enrolled_date_epoch:
            type: integer
          last_enrolled_date_utc:
            type: string
          distribution_point:
            type: string
          sus:
            type: string
          netboot_server:
            type: string
          site:
            $ref: '#/definitions/site'
          itunes_store_account_is_active:
            type: boolean
      location:
        $ref: '#/definitions/location'
      purchasing:
        $ref: '#/definitions/purchasing'
  criterion:
    type: object
    properties:
      name:
        type: string
      priority:
        type: integer
      and_or:
        type: string
        enum: [and, or]
      search_type:
        type: string
      value:
        type: string
      opening_paren:
        type: boolean
      closing_paren:
        type: boolean
  department:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
    required:
      - name
  departments:
    properties:
      department:
        $ref: '#/definitions/department'
  directory_binding:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      priority:
        type: integer
      domain:
        type: string
      username:
        type: string
      password:
        type: string
      computer_ou:
        type: string
      type:
        type: string
    required:
      - name
  directory_bindings:
    properties:
      directory_binding:
        $ref: '#/definitions/id_name'
  disk_encryption_configuration:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      key_type:
        type: string
        enum: [Individual, Institutional, Individual and Institutional]
        default: Individual
      file_vault_enabled_users:
        type: string
        enum: [Current or Next User, Management Account]
        default: Management Account
    required:
      - name
  disk_encryption_configurations:
    properties:
      disk_encryption_configuration:
        $ref: '#/definitions/id_name'
  distribution_point:
    type: object
    properties:
      id:
        type: integer
      name: 
        type: string
      ip_address:
        type: string
      is_master:
        type: boolean
      failover_point:
        type: string
      failover_point_url:
        type: string
      enable_load_balancing:
        type: boolean
      local_path:
        type: string
      ssh_username:
        type: string
      password:
        type: string
      connection_type:
        type: string
        enum: [SMB, AFP]
      share_name:
        type: string
      workgroup_or_domain:
        type: string
      share_port:
        type: integer
      read_only_username:
        type: string
      read_only_password:
        type: string
      read_write_username:
        type: string
      read_write_password:
        type: string
      http_downloads_enabled:
        type: boolean
      http_url:
        type: string
      context:
        type: string
      protocol:
        type: string
      port:
        type: integer
      no_authentication_required:
        type: boolean
      username_password_required:
        type: boolean
      http_username:
        type: string
      http_password:
        type: string
    required:
      - name
      - share_name
      - read_only_username
      - read_write_username
  distribution_points:
    properties:
      distribution_point:
        $ref: '#/definitions/id_name'
  dock_item:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      type:
        type: string
        enum: [App, File, Folder]
        default: App
      path:
        type: string
        example: file://localhost/Applications/Safari.app/
      contents:
        type: string
    required:
      - name
      - path
      - type
  dock_items:
    properties:
      dock_item:
        $ref: '#/definitions/id_name'
  ebook:
    type: object
    properties:
      general:
        type: object
        properties:
          id:
            type: integer
          name:
            type: string
          author:
            type: string
          version:
            type: string
          free:
            type: boolean
          url:
            type: string
          deployment_type:
            type: string
            enum: [Make Available in Self Service, Install Automatically/Prompt Users to Install]
          file_type:
            type: string
            enum: [PDF, IBOOK, EPUB]
          deploy_as_managed:
            type: boolean
          category:
            $ref: '#/definitions/id_name'
          self_service_icon:
            type: string
          site:
            $ref: '#/definitions/site'
        required:
          - name
      scope:
        type: object
        properties:
          all_computers:
            type: boolean
          all_mobile_devices:
            type: boolean
          all_jss_users:
            type: boolean
          computers:
            type: object
            properties:
              computer:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  udid:
                    type: string
          computer_groups:
            properties:
              computer_group:
                $ref: '#/definitions/id_name'
          mobile_devices:
            type: object
            properties:
              mobile_device:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  udid:
                    type: string
                  wifi_mac_address:
                    type: string
          mobile_device_groups:
            properties:
              mobile_device_group:
                $ref: '#/definitions/id_name'
          buildings:
            properties:
              building:
                $ref: '#/definitions/id_name'
          departments:
            properties:
              department:
                $ref: '#/definitions/id_name'
          jss_users:
            properties:
              user:
                $ref: '#/definitions/id_name'
          jss_user_groups:
            properties:
              user_group:
                $ref: '#/definitions/id_name'
          classes:
            properties:
              class:
                $ref: '#/definitions/id_name'
          limitations:
            type: object
            properties:
              network_segments:
                properties:
                  network_segment:
                    $ref: '#/definitions/id_name'
              users:
                properties:
                  user:
                    $ref: '#/definitions/id_name'
              user_groups:
                properties:
                  user_group:
                    $ref: '#/definitions/id_name'
          exclusions:
            type: object
            properties:
              computers:
                type: object
                properties:
                  computer:
                    type: object
                    properties:
                      id:
                        type: integer
                      name:
                        type: string
                      udid:
                        type: string
              computer_groups:
                properties:
                  computer_group:
                    $ref: '#/definitions/id_name'
              mobile_devices:
                type: object
                properties:
                  mobile_device:
                    type: object
                    properties:
                      id:
                        type: integer
                      name:
                        type: string
                      udid:
                        type: string
                      wifi_mac_address:
                        type: string
              mobile_device_groups:
                properties:
                  mobile_device_group:
                      $ref: '#/definitions/id_name'
              buildings:
                properties:
                  building:
                    $ref: '#/definitions/id_name'
              departments:
                properties:
                  department:
                    $ref: '#/definitions/id_name'
              jss_users:
                properties:
                  user:
                    $ref: '#/definitions/id_name'
              jss_user_groups:
                properties:
                  user_group:
                    $ref: '#/definitions/id_name'
              users:
                type: object
                properties:
                  user:
                    type: object
                    properties:
                      name:
                        type: string
              user_groups:
                properties:
                  user_group:
                    $ref: '#/definitions/id_name'
              network_segments:
                type: object
                properties:
                  network_segment:
                    type: object
                    properties:
                      id:
                        type: integer
                      uid:
                        type: string
                      name:
                        type: string
      self_service:
        type: object
        properties:
          install_button_text:
            type: string
          self_service_description:
            type: string
          force_users_to_view_description:
            type: boolean
          self_service_icon:
            type: string
          feature_on_main_page:
            type: boolean
          self_service_categories:
            type: object
            properties:
              category:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  display_in:
                    type: boolean
                  feature_in:
                    type: boolean
          notification:
            type: boolean
          notification_subject:
            type: string
          notification_message:
            type: string
  ebooks:
    type: object
    properties:
      ebook:
        $ref: '#/definitions/id_name'
  group:
    type: object
    properties:
      id:
        type: integer
      name:
        description: Group name
        type: string
        example: Group Name
    required:
      - name
  gsx_connection:
    type: object
    properties:
      enabled:
        type: boolean
      username:
        type: string
      account_number:
        type: integer
      region:
        type: string
        enum: [Americas, APAC, EMEA, LatinAmerica]
      uri:
        type: string
  healthcare_listener:
    type: object
    properties:
      id:
        type: integer
      infratructure_manager_id:
        type: integer
      enabled:
        type: boolean
      name:
        type: string
      single_ips:
        type: string
      range_ips:
        type: string
      port:
        type: integer
      commands:
        type: string
      device_inventory_field:
        type: string
      notification_enabled:
        type: boolean
      notification_emails:
        type: string
  healthcare_listeners:
    properties:
      healthcare_listener:
        $ref: '#/definitions/healthcare_listener'
  ibeacon:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      uuid:
        type: string
      major:
        type: string
      minor:
        type: string
    required:
      - name
      - uuid
  ibeacons:
    properties:
      ibeacon:
        $ref: '#/definitions/ibeacon'
  id_name:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
    required:
      - name
  infrastructure_manager:
    type: object
    properties:
      id:
        type: integer
      uuid:
        type: string
      name:
        type: string
      hostname:
        type: string
      last_check_in:
        type: string
      last_reported_ip:
        type: string
      operating_system:
        type: string
      operating_system_version:
        type: string
      recurring_check_in_frequency:
        type: integer
  infrastructure_managers:
    properties:
      infrastructure_manager:
        $ref: '#/definitions/infrastructure_manager'
  ldap_server:
    type: object
    properties:
      connection:
        type: object
        properties:
          id:
            type: integer
          name:
            type: string
          hostname:
            type: string
          server_type:
            type: string
            enum: [Active Directory, Open Directory, eDirectory, Custom]
          port:
            type: integer
          use_ssl:
            type: boolean
          authentication_type:
            type: string
            enum: [simple, CRAM-MD5, DIGEST-MD5, none]
          open_close_timeout:
            type: integer
          search_timeout:
            type: integer
          referral_response:
            type: string
            enum: [ignore, follow]
          use_wildcards:
            type: boolean
          connection_is_used_for:
            type: string
        required:
          - name
  ldap_servers:
    properties:
      ldap_server:
        $ref: '#/definitions/id_name'
  licensed_software:
    type: object
    properties:
      general:
        type: object
        properties:
          id:
            type: integer
          name:
            type: string
          publisher:
            type: string
          platform:
            type: string
          send_email_on_violation:
            type: boolean
          remove_titles_from_inventory_reports:
            type: boolean
          exclude_titles_purchased_from_app_store:
            type: boolean
        required:
          - name
  licensed_software_all:
    type: object
    xml:
      name: licensed_software
    properties:
      licensed_software:
        type: object
        properties:
          id:
            type: integer
          name:
            type: string
  location:
    type: object
    properties:
      username:
        type: string
      realname:
        type: string
      real_name:
        type: string
      email_address:
        type: string
      position:
        type: string
      phone:
        type: string
      phone_number:
        type: string
      department:
        type: string
      building:
        type: string
      room:
        type: string
  logflush:
    type: object
    properties:
      log:
        type: string
        enum: [policy]
      log_id:
        type: integer
      interval:
        type: string
        enum: [Zero Days, Zero Weeks, Zero Months, Zero Years, One Days, One Weeks, One Months, One Years, Two Days, Two Weeks, Two Months, Two Years, Three Days, Three Weeks, Three Months, Three Years, Six Days, Six Weeks, Six Months, Six Years]
      computers:
        type: object
        properties:
          computer:
            type: object
            properties:
              id:
                type: integer
    required:
      - log
      - log_id
      - interval
  mac_application:
    type: object
    properties:
      general:
        type: object
        properties:
          id:
            type: integer
          name:
            type: string
          version:
            type: string
          is_free:
            type: boolean
          bundle_id:
            type: string
          url:
            type: string
          category:
            $ref: '#/definitions/category'
          site:
            $ref: '#/definitions/site'
        required:
          - name
          - version
          - bundle_id
          - url
  mac_applications:
    type: object
    properties:
      mac_application:
        type: object
        properties:
          id:
            type: integer
          name:
            type: string
  managed_preference_profile:
    type: object
    properties:
      general:
        type: object
        properties:
          id:
            type: integer
          name:
            type: string
          enabled:
            type: boolean
          plist:
            type: string
        required:
          - name
  managed_preference_profiles:
    type: object
    properties:
      managed_preference_profile:
        type: object
        properties:
          id:
            type: integer
          name:
            type: string
  mobile_device:
    type: object
    properties:
      general:
        type: object
        properties:
          id:
            type: integer
          display_name:
            type: string
          device_name:
            type: string
          name:
            type: string
          asset_tag:
            type: string
          last_inventory_update:
            type: string
          last_inventory_update_epoch:
            type: integer
          last_inventory_update_utc:
            type: string
          capacity:
            type: integer
          capacity_mb:
            type: integer
          available:
            type: integer
          available_mb:
            type: integer
          percentage_used:
            type: integer
          os_type:
            type: string
          os_version:
            type: string
          os_build:
            type: string
          serial_number:
            type: string
          udid:
            type: string
          initial_entry_date_epoch:
            type: integer
          initial_entry_date_utc:
            type: string
          phone_number:
            type: string
          ip_address:
            type: string
          wifi_mac_address:
            type: string
          bluetooth_mac_address:
            type: string
          modem_firmware:
            type: string
          model:
            type: string
          model_identifier:
            type: string
          model_number:
            type: string
          model_display:
            type: string
          device_ownership_level:
            type: string
          last_enrollment_epoch:
            type: integer
          last_enrollment_utc:
            type: string
          managed:
            type: boolean
          supervised:
            type: boolean
          exchange_activesync_device_identifier:
            type: string
          shared:
            type: string
          tethered:
            type: string
          battery_level:
            type: integer
          ble_capable:
            type: boolean
          lost_mode_enabled:
            type: string
          lost_mode_enable_issued_epoch:
            type: integer
          lost_mode_enable_issued_utc:
            type: string
          lost_mode_message:
            type: string
          lost_mode_phone:
            type: string
          lost_mode_footnote:
            type: string
          lost_location_epoch:
            type: integer
          lost_location_utc:
            type: string
        required:
          - name
          - udid
          - serial_number
  mobile_device_application:
    type: object
    properties:
      general:
        type: object
        properties:
          id:
            type: integer
          name:
            type: string
          display_name:
            type: string
          description:
            type: string
          bundle_id:
            type: string
          version:
            type: string
          internal_app:
            type: boolean
          category:
            $ref: '#/definitions/category'
          icon:
            type: string
          mobile_device_provisioning_profile:
            type: integer
          itunes_store_url:
            type: string
          make_available_after_install:
            type: boolean
          itunes_country_region:
            type: string
          itunes_sync_time:
            type: integer
          deployment_type:
            type: string
            enum: [Make Available in Self Service, Install Automatically/Prompt Users to Install]
          deploy_automatically:
            type: boolean
          deploy_as_managed_app:
            type: boolean
          remove_app_when_mdm_profile_is_removed:
            type: boolean
          prevent_backup_of_app_data:
            type: boolean
          keep_description_and_icon_up_to_date:
            type: boolean
          free:
            type: boolean
          take_over_management:
            type: boolean
          host_externally:
            type: boolean
          external_url:
            type: string
          site:
            $ref: '#/definitions/site'
        required:
          - name
          - bundle_id
          - version
  mobile_device_applications:
    type: object
    properties:
      mobile_device_application:
        type: object
        properties:
          id:
            type: integer
          name:
            type: string
          display_name:
            type: string
          bundle_id:
            type: string
          version:
            type: string
          internal_app:
            type: boolean
  mobile_device_command_post:
    type: object
    properties:
      general:
        type: object
        properties:
          command:
            type: string
            enum: [Settings, EraseDevice, ClearPasscode, UnmanageDevice, UpdateInventory, ClearRestrictionsPassword, SettingsEnableDataRoaming, SettingsDisableDataRoaming, SettingsEnableVoiceRoaming, SettingsDisableVoiceRoaming, SettingsEnableAppAnalytics, SettingsDisableAppAnalytics, SettingsEnableDiagnosticSubmission, SettingsDisableDiagnosticSubmission, BlankPush, ShutDownDevice (supervised only), RestartDevice (supervised only), PasscodeLockGracePeriod (shared iPad only)]
        required:
           - command
      mobile_devices:
        type: object
        properties:
          mobile_device:
            type: object
            properties:
              id:
                type: integer
            required:
              - id
  mobile_device_command:
    type: object
    properties:
      general:
        type: object
        properties:
          id:
            type: integer
          command:
            type: string
          udid:
            type: string
          uuid:
            type: string
          profile_id:
            type: integer
          date_sent:
            type: string
          date_sent_epoch:
            type: string
          date_sent_utc:
            type: string
          apns_result_status:
            type: string
            example: Acknowledged
          profile_udid:
            type: string
      mobile_devices:
        type: object
        properties:
          mobile_device:
            type: object
            properties:
              id:
                type: integer
              udid:
                type: string
              serial_number:
                type: string
              phone_number:
                type: string
              wifi_mac_address:
                type: string
  mobile_device_commands:
    type: object
    properties:
      mobile_device_command:
        type: object
        properties:
          id:
            type: integer
          command:
            type: string
          udid:
            type: string
          profile_id:
            type: integer
      mobile_devices:
        type: object
        properties:
          mobile_device:
            type: object
            properties:
              id:
                type: integer
              udid:
                type: string
              serial_number:
                type: string
              phone_number:
                type: string
              wifi_mac_address:
                type: string
  mobile_device_configuration_profile:
    type: object
    xml:
      name: configuration_profile
    properties:
      general:
        type: object
        properties:
          id:
            type: integer
          name:
            type: string
          description:
            type: string
          site:
            $ref: '#/definitions/site'
          category:
            $ref: '#/definitions/category'
          uuid:
            type: string
          deployment_method:
            type: string
            enum: [Install Automatically, Make Available in Self Service]
          redeploy_on_update:
            type: string
          redeploy_Dayss_before_certificate_expires:
            type: integer
          payloads:
            type: string
        required:
          - name
  mobile_device_configuration_profiles:
    type: object
    xml:
      name: configuration_profiles
    properties:
      configuration_profile:
        type: object
        properties:
          id:
            type: integer
          name:
            type: string
  mobile_device_enrollment_profile:
    type: object
    properties:
      general:
        type: object
        properties:
          id:
            type: integer
          name:
            type: string
          invitation:
            type: string
          udid:
            type: string
          description:
            type: string
        required:
          - name
      location:
        $ref: '#/definitions/location'
      purchasing:
        $ref: '#/definitions/purchasing'
  mobile_device_enrollment_profiles:
    type: object
    properties:
      mobile_device_enrollment_profile:
        type: object
        properties:
          id:
            type: integer
          name:
            type: string
          invitation:
            type: string
  mobile_device_extension_attribute:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      description:
        type: string
      date_type:
        type: string
        enum: [String, Date, Integer]
        default: String
      input_type:
        type: object
        properties:
          type:
            type: string
            enum: [Text Field, Pop-up Menu, LDAP Attribute Mapping]
            default: Text Field
      inventory_display:
        type: string
        enum: [General, Hardware, User and Location, Purchasing, Extension Attributes]
        default: General
    required:
      - name
  mobile_device_extension_attributes:
    type: object
    properties:
      mobile_device_extension_attribute:
        type: object
        properties:
          id:
            type: integer
          name:
            type: string
  mobile_device_group:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      is_smart:
        type: boolean
      criteria:
        type: object
        properties:
          criterion:
            $ref: '#/definitions/criterion'
      site:
        $ref: '#/definitions/site'
      mobile_devices:
        type: object
        properties:
          mobile_device:
            type: object
            properties:
              id:
                type: integer
              name:
                type: string
              mac_address:
                type: string
              udid:
                type: string
              wifi_mac_address:
                type: string
              serial_number:
                type: string
    required:
      - name
      - is_smart
  mobile_device_groups:
    type: object
    properties:
      mobile_device_group:
        type: object
        properties:
          id:
            type: integer
          name:
            type: string
          is_smart:
            type: boolean
  mobile_device_history:
    type: object
    properties:
      general:
        type: object
        properties:
          id:
            type: integer
          name:
            type: string
          udid:
            type: string
          serial_number:
            type: string
          mac_address:
            type: string
  mobile_devices:
    type: object
    properties:
      mobile_device:
        type: object
        properties:
          id:
            type: integer
          name:
            type: string
          device_name:
            type: string
          udid:
            type: string
          serial_number:
            type: string
          phone_number:
            type: string
          wifi_mac_address:
            type: string
          managed:
            type: boolean
          supervised:
            type: boolean
          model:
            type: string
          model_identifier:
            type: string
          model_display:
            type: string
          username:
            type: string
  netboot_server:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      ip_address:
        type: string
      default_image:
        type: boolean
        default: true
      specific_image:
        type: boolean
        default: false
      target_platform:
        type: string
        enum: [PowerPC, Intel/x86]
        default: PowerPC
      share_point:
        type: string
      set:
        type: string
      image:
        type: string
      protocol:
        type: string
        enum: [nfs, http]
        default: nfs
      configure_manually:
        type: boolean
      boot_args:
        type: string
      boot_file:
        type: string
      boot_device:
        type: string
    required:
      - name
      - ip_address
  netboot_servers:
    type: object
    properties:
      netboot_server:
        $ref: '#/definitions/id_name'
  network_segment:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      starting_address:
        type: string
      ending_address:
        type: string
      distribution_server:
        type: string
      distribution_point:
        type: string
      url:
        type: string
      netboot_server:
        type: string
      swu_server:
        type: string
      building:
        type: string
      department:
        type: string
      override_buildings:
        type: boolean
        default: false
      override_departments:
        type: boolean
        default: false
    required:
      - name
      - starting_address
      - ending_address
  network_segments:
    type: object
    properties:
      network_segment:
        type: object
        properties:
          id:
            type: integer
          name:
            type: string
          starting_address:
            type: string
          ending_address:
            type: string
  os_x_configuration_profile:
    type: object
    properties:
      general:
        type: object
        properties:
          id:
            type: integer
          name:
            type: string
          description:
            type: string
          site:
            $ref: '#/definitions/site'
          category:
            $ref: '#/definitions/category'
          distribution_method:
            type: string
          user_removable:
            type: boolean
          level:
            type: string
            enum: [computer, user]
          uuid:
            type: string
          redeploy_on_update:
            type: string
          payloads:
            type: string
        required:
          - name
  os_x_configuration_profiles:
    type: object
    properties:
      os_x_configuration_profile:
        $ref: '#/definitions/id_name'
  package:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      category:
        type: string
      filename:
        type: string
      info:
        type: string
      notes:
        type: string
      priority:
        type: integer
      reboot_required:
        type: boolean
      fill_user_template:
        type: boolean
      fill_existing_users:
        type: boolean
      boot_volume_required:
        type: boolean
      allow_uninstalled:
        type: boolean
      os_requirements:
        type: string
      required_processor:
        type: string
        enum: [None, ppc, x86]
        default: None
      switch_with_package:
        type: string
      install_if_reported_available:
        type: boolean
      reinstall_option:
        type: string
      triggering_files:
        type: string
      send_notification:
        type: boolean
    required:
      - name
      - filename
  packages:
    type: object
    properties:
      package:
        $ref: '#/definitions/id_name'
  patch_reporting_software_titles:
    type: object
    properties:
      patch_reporting_software_title:
        $ref: '#/definitions/id_name'
  peripheral:
    type: object
    properties:
      general:
        type: object
        properties:
          id:
            type: integer
          bar_code_1:
            type: string
          bar_code_2:
            type: string
          type:
            type: string
          fields:
            type: object
            properties:
              field:
                type: object
                properties:
                  name:
                    type: string
                  value:
                    type: string
        required:
          - type
      location:
        $ref: '#/definitions/location'
      purchasing:
        $ref: '#/definitions/purchasing'
      attachments:
        type: object
        properties:
          attachment:
            $ref: '#/definitions/attachment'
  peripherals:
    type: object
    properties:
      peripheral:
        type: object
        properties:
          id:
            type: integer
          name:
            type: string
          type:
            type: string
          bar_code_1:
            type: string
          bar_code_2:
            type: string
          computer_id:
            type: integer
  peripheral_type:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      fields:
        type: object
        properties:
          field:
            type: object
            properties:
              name:
                type: string
              order:
                type: integer
              type:
                type: string
                enum: [menu, text]
              choices:
                type: object
                properties:
                  choice:
                    type: string
    required:
      - name
  peripheral_types:
    properties:
      peripheral_type:
        $ref: '#/definitions/id_name'
  policy:
    type: object
    properties:
      general:
        type: object
        properties:
          id:
            type: integer
          name:
            type: string
          enabled:
            type: boolean
          trigger:
            type: string
          trigger_checkin:
            type: boolean
          trigger_enrollment_complete:
            type: boolean
          trigger_login:
            type: boolean
          trigger_logout:
            type: boolean
          trigger_network_state_changed:
            type: boolean
          trigger_startup:
            type: boolean
          trigger_other:
            type: string
          frequency:
            type: string
            enum: [Once per computer, Once per user per computer, Once per user, Once every day, Once every week, Once every month, Ongoing]
          location_user_only:
            type: boolean
          target_drive:
            type: string
          offline:
            type: boolean
          category:
            $ref: '#/definitions/category'
          date_time_limitations:
            type: object
            properties:
              activation_date:
                type: string
              activation_date_epoch:
                type: integer
              activation_date_utc:
                type: string
              expiration_date:
                type: string
              expiration_date_epoch:
                type: integer
              expiration_date_utc:
                type: string
              no_execute_on:
                type: object
                properties:
                  day:
                    type: string
                    enum: [Sun, Mon, Tue, Wed, Thu, Fri, Sat]
              no_execute_start:
                type: string
              no_execute_end:
                type: string
          network_limitations:
            type: object
            properties:
              minimum_network_connection:
                type: string
                enum: [No Minimum, Ethernet]
              any_ip_address:
                type: boolean
          override_default_settings:
            type: object
            properties:
              target_drive:
                type: string
              distribution_point:
                type: string
              force_afp_smb:
                type: boolean
              sus:
                type: string
              netboot_server:
                type: string
          network_requirements:
            type: string
            enum: [Any, Ethernet]
          site:
            $ref: '#/definitions/site'
        required:
          - name
  policies:
    properties:
      policy:
        $ref: '#/definitions/id_name'
  printer:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      category:
        type: string
      uri:
        type: string
      CUPS_name:
        type: string
      location:
        type: string
      model:
        type: string
      info:
        type: string
      notes:
        type: string
      make_default:
        type: boolean
      use_generic:
        type: boolean
      ppd:
        type: string
      ppd_contents:
        type: string
    required:
      - name
  printers:
    properties:
      printer:
        $ref: '#/definitions/id_name'
  purchasing:
    type: object
    properties:
      is_purchased:
        type: boolean
      is_leased:
        type: boolean
      po_number:
        type: string
      vendor:
        type: string
      applecare_id:
        type: string
      purchase_price:
        type: string
      purchasing_account:
        type: string
      po_date:
        type: string
      po_date_epoch:
        type: integer
      po_date_utc:
        type: string
      warranty_expires:
        type: string
      warranty_expires_epoch:
        type: integer
      warranty_expires_utc:
        type: string
      lease_expires:
        type: string
      lease_expires_epoch:
        type: integer
      lease_expires_utc:
        type: string
      life_expectancy:
        type: integer
      purchasing_contact:
        type: string
  removable_mac_address:
    properties:
      id:
        type: integer
      name:
        type: string
  removable_mac_addresses:
    properties:
      removable_mac_address:
        $ref: '#/definitions/removable_mac_address'
  restricted_software:
    type: object
    properties:
      general:
        type: object
        properties:
          id:
            type: integer
          name:
            type: string
          process_name:
            type: string
          match_exact_process_name:
            type: boolean
          send_notification:
            type: boolean
          kill_process:
            type: boolean
          delete_executable:
            type: boolean
          display_message:
            type: string
          site:
            $ref: '#/definitions/site'
        required:
          - name
          - process_name
  restricted_software_all:
    xml:
      name: restricted_software
    properties:
      restricted_software_title:
        $ref: '#/definitions/id_name'
  script:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      category:
        type: string
      filename:
        type: string
      info:
        type: string
      notes:
        type: string
      priority:
        type: string
        enum: [Before, After, At Reboot]
      parameters:
        type: object
        properties:
          parameter4:
            type: string
          parameter5:
            type: string
          parameter6:
            type: string
          parameter7:
            type: string
          parameter8:
            type: string
          parameter9:
            type: string
          parameter10:
            type: string
          parameter11:
            type: string
      os_requirements:
        type: string
      script_contents:
        type: string
      script_contents_encoded:
        type: string
    required:
      - name
  scripts:
    properties:
      script:
        $ref: '#/definitions/id_name'
  site:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
    required:
      - name
  sites:
    properties:
      site:
        $ref: '#/definitions/site'
  smtp_server:
    type: object
    properties:
      enabled:
        type: boolean
      host:
        type: string
      port:
        type: integer
      timeout:
        type: integer
      authorization_required:
        type: boolean
      username:
        type: string
      password:
        type: string
      ssl:
        type: boolean
      tls:
        type: boolean
      send_from_name:
        type: string
      send_from_email:
        type: string
  software_title:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      category:
        $ref: '#/definitions/category'
      notifications:
        type: object
        properties:
          jss_notification:
            type: boolean
          email_notification:
            type: boolean
      total_versions:
        type: integer
      total_computers:
        type: integer
  software_update_server:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      ip_address:
        type: string
      port:
        type: integer
      set_system_wide:
        type: boolean
    required:
      - name
      - ip_address
  software_update_servers:
    properties:
      software_update_server:
        $ref: '#/definitions/id_name'
  user_extension_attribute:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      description:
        type: string
      data_type:
        type: string
        enum: [String, Integer, Date]
      input_type:
        type: object
        properties:
          type:
            type: string
            enum: [Text Field, Pop-up Menu]
            default: Text Field
    required:
      - name
  user_extension_attributes:
    properties:
      user_extension_attribute:
        $ref: '#/definitions/id_name'
  user_group:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      is_smart:
        type: boolean
      is_notify_on_change:
        type: boolean
      site:
        $ref: '#/definitions/site'
      criteria:
        type: object
        properties:
          criterion:
            $ref: '#/definitions/criterion'
      users:
        type: object
        properties:
          user:
            type: object
            properties:
              id:
                type: integer
              username:
                type: string
              full_name:
                type: string
              phone_number:
                type: string
              email_address:
                type: string
    required:
      - name
      - is_smart
  user_groups:
    type: object
    properties:
      user_group:
        type: object
        properties:
          id:
            type: integer
          name:
            type: string
          is_smart:
            type: boolean
          is_notify_on_change:
            type: boolean
  user:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      full_name:
        type: string
      email:
        type: string
      email_address:
        type: string
      phone_number:
        type: string
      position:
        type: string
      enable_custom_photo_url:
        type: boolean
      custom_photo_url:
        type: string
      ldap_server:
        $ref: '#/definitions/id_name'
      extension_attributes:
        type: object
        properties:
          extension_attribute:
            type: object
            properties:
              id:
                type: integer
              name:
                type: string
              type:
                type: string
                enum: [String, Integer, Date]
              value:
                type: string
      sites:
        $ref: '#/definitions/site'
      links:
        type: object
        properties:
          computers:
            type: object
            properties:
              computer:
                $ref: '#/definitions/id_name'
          peripherals:
            type: object
            properties:
              peripheral:
                $ref: '#/definitions/id_name'
          mobile_devices:
            type: object
            properties:
              mobile_device:
                $ref: '#/definitions/id_name'
          vpp_assignments:
            type: object
            properties:
              vpp_assignment:
                $ref: '#/definitions/id_name'
          total_vpp_code_count:
            type: integer
    required:
      - name
  users:
    properties:
      user:
        $ref: '#/definitions/id_name'
  vpp_account:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      contact:
        type: string
      service_token:
        type: string
      account_name:
        type: string
      expiration_date:
        type: string
      country:
        type: string
      apple_id:
        type: string
      site:
        $ref: '#/definitions/site'
      populate_catalog_from_vpp_content:
        type: boolean
      notify_disassociation:
        type: boolean
      auto_register_managed_users:
        type: boolean
    required:
      - name
      - service_token
  vpp_accounts:
    type: object
    properties:
      vpp_account:
        $ref: '#/definitions/id_name'
  vpp_assignment:
    type: object
    properties:
      general:
        type: object
        properties:
          id:
            type: integer
          name:
            type: string
          vpp_admin_account_id:
            type: integer
          vpp_admin_account_name:
            type: string
        required:
          - name
          - vpp_admin_account_id
      ios_apps:
        type: object
        properties:
          ios_app:
            type: object
            properties:
              adam_id:
                type: integer
              name:
                type: string
      ebooks:
        type: object
        properties:
          ebook:
            type: object
            properties:
              adam_id:
                type: integer
              name:
                type: string
  vpp_assignments:
    type: object
    properties:
      vpp_assignment:
        type: object
        properties:
          id:
            type: integer
          vpp_admin_account_id:
            type: integer
          name:
            type: string
  vpp_invitation:
    type: object
    properties:
      general:
        type: object
        properties:
          id:
            type: integer
          name:
            type: string
          vpp_account:
            type: object
            properties:
              id:
                type: integer
            required:
              - id
          distribution_method:
            type: string
            enum: [Prompt users to accept/make available in Self Service, Send emails, Make available in Self Service only]
          sender_name:
            type: string
          sender_email_address:
            type: string
          subject:
            type: string
          message:
            type: string
          invitation_usage:
            type: object
            properties:
              size:
                type: integer
        required:
          - name
  vpp_invitations:
    type: object
    properties:
      vpp_invitation:
        $ref: '#/definitions/id_name'
  webhook:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      enabled:
        type: boolean
      url:
        type: string
      content_type:
        type: string
        enum: [text/xml, application/json]
      event:
        type: string
        enum: [ComputerAdded, ComputerCheckIn, ComputerInventoryCompleted, ComputerPolicyFinished, ComputerPushCapabilityChanged, JSSShutdown, JSSStartup, MobileDeviceCheckIn, MobileDeviceCommandCompleted, MobileDeviceEnrolled, MobileDevicePushSent, MobileDeviceUnEnrolled, PatchSoftwareTitleUpdated, PushSent, RestAPIOperation, SCEPChallenge, SmartGroupComputerMembershipChange, SmartGroupMobileDeviceMembershipChange]
    required:
      - name
      - event
      - url
  webhooks:
    properties:
      webhook:
        $ref: '#/definitions/id_name'
